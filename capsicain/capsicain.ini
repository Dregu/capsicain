# Capsicain config file

# This is the config that I use myself.
# Requires that the Windows keyboard layout is set to standard US-English

#v35: new map for alt chars, new tappedAlt chars
#v36: KEY_MODIFIER_IFTAPPED_MAPPING
#v37: add LControlBlocksAlphaMapping, ProcessOnlyFirstKeyboard
#v38: add Workman Std, Colemak, Dvorak. Now with layerName
#v38b: rename to LControlLWinBlocksAlphaMapping
#v38c: add special chars ╔═╗║║╚╝╠╣╩╦ ┌─┐││└┘├┤┴┬ º¹²³
#v39: comment char is now #
#V40: changed key labels from 'DOT' to '.' and all similar cases. '[' was a pain...
#v41: introduced MAPFROM-MAPTO-MAPEND. Changed section names to 'MAP_*'
#v42: cleanup
#v43: changed some NumPad key labels, put ┌─┐╚═╝ on NumPad

# TODO: 
#     öäü do not react to CapsLock ON
#     configurable mods for each Layer


# ╔════════════════════════════════════════════════════════════════════════╗
# ║     ENABLE / DISABLE FEATURES                                          ║
# ║  You can comment out features you don't like.                          ║
# ╚════════════════════════════════════════════════════════════════════════╝

[[STARTUP]]

IniVersion 43b  #any string, so you can check with [ESC]+[S] if you're running the right config

ActiveLayer 1
                #This layer is active on startup
                #Switch with [ESC]+[0..9]  
                #0=hardcoded = no changes at all
                #1=QwertzJ
                #2=WorkmanJ
                #3=Workman
                #4=Colemak
                #5=Colemak Angle-Mod-DH
                #6=Dvorak simplified US


[[OPTIONS]]

#Debug          #verbose logging. Switch with [ESC]+[D]

DelayForKeySequenceMS 0 
                #System may drop keys when they are sent too fast. 
                #1 is the lower limit for reliable operation on some machines.
                #5 is the lower limit when I'm inside a Linux VM
                #Decrease/Increase with [,] and [.] keys
                #NOTE: for RDP sessions, you want to set 'Options: Local Resources > Apply Windows Key combinations: On this machine'.
                #      Otherwise you need 10+ ms delay for reliable key sequences, depending on the network.
                #NOTE: the Windows Sleep function is not precise; '1ms' may actually sleep 1 or 20ms depending on thread scheduling.

#ProcessOnlyFirstKeyboard
                #if there is more than one keyboard (e.g. laptop with USB keyboard attached), 
                #Capsicain will lock to the board that sends the first key stroke. 
                #Useful to have a "debugging" board with standard behavior, or a guest board at your workplace.

StartAHK        #on startup, start autohotkey.exe if it is not running. Must be in the same directory as capsicain.exe.

ShiftShiftToShiftLock   
                #[LSHIFT] + [RSHIFT] = ShiftLock ON. [RSHIFT] + [LSHIFT] = ShiftLock OFF.
                #this makes the CapsLock key available for beautiful combos.
                #I like: OFF means OFF, no matter what the current CapsLock state is.

AltAltToAlt     
                #maps the combo [LALT]+[RALT] to [ALT] so you can use the very nicely positioned Alt keys for other things.
                #this feature requires that both Alt keys are mapped to MOD12 below.
                #sorry, this makes ALT+TAB uncomfortable

#FlipYZ         
                #flip Y and Z keys (US QWERTY to GER QWERTZ)
                #This is already defined in my Qwertz alpha mapping below.
                #The feature allows you to switch anytime without changing the config.
                #Switch with [ESC]+[Z]

FlipAltWinOnAppleKeyboards 
                #[ALT] <-> [WIN] on both sides because Apple keyboard on Windows is irritating.
                #This feature has no effect on PC keyboards.
                #Switch with [ESC]+[W]

LControlLWinBlocksAlphaMapping
                #Character keys are never remapped when [LControl] or [LWin] is down.
                #I don't want Ctrl+C to move with a Dvorak layout.



# ╔════════════════════════════════════════════════════════════════════════╗
# ║     DEFINE THE MODIFIER KEYS                                           ║
# ║  MAP Key A to MODIFIER X or Key B when tapped                          ║
# ║  "NOP" is the "No OPeration" key with scancode 0 ("nothing happens").  ║
# ║  Modifiers that are not defined here work as usual.                    ║
# ║  Modifier labels: LSHF  LCTRL  LWIN  LALT                              ║
# ║                   RSHF  RCTRL  RWIN  RALT                              ║
# ║                   MOD9  MOD10  MOD11 MOD12                             ║
# ║                   MOD13 MOD14  MOD15                                   ║
# ╚════════════════════════════════════════════════════════════════════════╝

[[MAP_KEY_TOMODIFIER_TOIFTAPPED]]

    CAPS    MOD9    NOP
    TAB     MOD10   TAB
    LALT    MOD12   NOP
    RALT    MOD12   NOP
    L\      LSHF    NOP     # L\ is the label for 'Left Backslash key'; it exists only on ISO boards.
    /       RSHF    NOP


# ╔════════════════════════════════════════════════════════════════════════╗
# ║     MUST KNOW: MODIFIER STRINGS                                        ║
# ║  This reference section is not read (it is hardcoded).                 ║
# ║  You must understand this to define key combos.                        ║
# ╚════════════════════════════════════════════════════════════════════════╝

[[REFERENCE: MODIFIER STRINGS]] 
This reference section is not read (it is hardcoded).

POSITION:
All modifier keys are assigned to a position in the [modifier string].

    LSHIFT  [.... ...1]
    LCTRL   [.... ..2.]
    LWIN    [.... .3..]
    LALT    [.... 4...]

    RSHIFT  [...5 ....]
    RCTRL   [..6. ....]
    RWIN    [.7.. ....]
    RALT    [8... ....]
    
NOTE: By default, the eight regular modifiers are forwarded to Windows. The 'custom' modifier keys MOD9..MOD15 are tracked but never sent out.
NOTE: [x0] is the same as [00x0] and [0000 0000 0000 00x0] (just like the number 42 = 0042 = 000000042. You can add and remove leading 0)

    MOD9    [...9 .... ....]
    MOD10   [..A. .... ....]
    MOD11   [.B.. .... ....]
    MOD12   [C... .... ....]

I do not use these (yet). 15 modifiers and 128 combinations is a bit overkill...
    MOD13   [...D .... .... ....]
    MOD14   [..E. .... .... ....]
    MOD15   [.F.. .... .... ....]
#   MOD16   not possible, there are 'only' 15 modifiers.


MODIFIER STATE SYMBOLS:
Symbols for modifier state, replacing the 1 2 3 .. F in the diagrams above: 
        v   the modifier is down
        !   the modifier is NOT down
        T   the modifier was tapped. You can combine tapped and pressed modifiers.
        .   ignore, forward to Windows

EXAMPLES:
 A [...v]       is  key combo [LeftShift] + key [A].  All other modifiers may or may not be pressed.
 A [..v.]       is  LeftControl + A
 A [.v..]       is  LeftWin + A
 A [v...]       is  LeftAlt + A
 A [...v ....]  is  RShift + A

 A [v..v]       is  LShift + LALT + A
 A [!..v]       is  LShift and NOT-LAlt + A
 B [...v ...v]  is  RightShift + LeftShift + B

 C [...T]       is  Tapped-LShift + C
 D [.vTT]       is  Tapped-LShift, Tapped-LControl, Win + D

 A [.... .... ...v] is  same as A [...v]
 E [...v .... ....] is  MOD9 key + E.  I mapped [CapsLock] to MOD9 in the section above.

 F [vvvv vvvv]  is  every standard modifier in da house + F

NOTE an issue called 'shadowing': many keyboards have limits about how many (and which) keys you can press at the same time.
    For example, on my Apple keyboard, the [ESC]+[CapsLock] combo shadows (blocks) all keys on the home row (asdfg hjkl).

NOTE we are dealing with physical keys here, NOT with characters. 
   "key A" means "the electrical switch on the left side that sends scancode #30 - on a standard US IBM keyboard it has a plastic keycap with an A printed on it".
   In other words, the labels on your keyboard do not matter. Deep down the driver stack, the labels on the IBM Model M (US) keyboard are the only truth.
   If the key in the lower left corner is labeled "Y" on your Euro keyboard, this is *still* scancode #44 = "SC_Z" = keyLabel 'Z'. 
   The mapping to Y (or whatever character) happens later, with the Windows keyboard layout.



# ╔═════════════════════════════════════════════════════════════════════════════════════════╗
# ║     MODIFIER COMBOS BELOW                                                               ║
# ║ This section defines all mappings that are not plain "keyA to keyB" mappings.           ║
# ║ These mappings are not changed by your alpha mapping ("QWERTZ layer", "DVORAK layer").  ║
# ║ These mappings may depend on your Windows keyboard layout; for example,                 ║
# ║       sending "Shift+2" will produce [@] on US layout but ["] on GER layout.            ║
# ╚═════════════════════════════════════════════════════════════════════════════════════════╝
 
 [[MAP_MODIFIER_COMBOS]]    

# This maps key combos to functions(). The syntax is always:
#    KeyLabel   [modifier string]  >  function( params )
#    
# KeyLabel : is usually what is printed on the key. A B C 1 2 3 , . ; ' / ESC
#     Others include NP1 (NumPad1), BSP (Backspace), RET (Return), INS (Insert), DEL (Delete)
#     To find the key label for a key:
#        1. Press [ESC] + [D]  (debug output)
#        2. Press the key you want
#        3. You see the [LABELv....  e.g. "[BSPv =e ..." is "BSP" (Backspace) scancode (hex)E
#     If you need keys that are not on your keyboard, look at the source files scancodes.cpp and scancodes.h

# [modifier string] : hey, you did read the last section, right? (of course not ;)

# function ( params ) : can be
#     key ( keyLabel )  : sends one key.                              Example:  A [..v.] key ( ESC )  -> LCtrl + A sends Escape
#     combo ( modifier + keyLabel) : sends simple combos              Example:  A [..v.] combo ( LCTRL + ESC )  -> LCtrl + A  sends LCtrl + Escape
#     comboNtimes ( modifier + keyLabel , n) : combo() but n times.   Example:  A [..v.] combo ( LCTRL + ESC , 5 )  -> LCtrl + A  sends LCtrl + Escape five times
#     moddedKey ( keyLabel & modifierString) : sends one key with any combination of modifiers.
#                                                                     Example:  A [..vv] moddedKey ( ESC & ..v. ..v.) -> LCtrl+LShift+A  sends LCtrl+RCtrl+ESC

# Every time you press (modifier + key), the rules in this section are evaluated.
# The first match wins -> the order of the rules can matter.
# Pressing Ctrl+Shift+A matches both rules: 
# A [..v.] (equals Ctrl+A) and 
# A [..vv] (equals Ctrl+Shift+A).
# So either the more specific rule (A+Ctrl+Shift) must come first, 
# OR you explicitly make the first rule A [..v!]   (A+Ctrl+NotShift)

# Tapped modifiers are similar.
# TapControl+Shift+A  will match the rule A [...v] (Shift+A).
# Therefore, you must put the rule (A [..Tv]) *before* the rule (A [...v])
# There is no symbol for "not tapped".


# ├┼┼┼┼┼┼────LETS GO────>

# [CapsLock] summons Cursor control to the right hand
# TAB   …  …  …  …  …     << >> ^  ^^ …  …  …  ENTR
# CAPS   UN CT CP PS RE    <- <  v  >  DL …  E||NTR
# LS||H   …  …  …  …        <! !> …  vv R||SHIFT    
 
    # Can be combined with the 8 regular modifiers. 'special' mods must not be pressed.
    J       [!!!v .... ....] > key(LEFT)  #note that Caps + Shift + J will result in Shift + Left
    L       [!!!v .... ....] > key(RIGHT)
    I       [!!!v .... ....] > key(UP)
    K       [!!!v .... ....] > key(DOWN)
    N       [!!!v .... ....] > combo(LCTRL+LEFT)  #1 word left
    M       [!!!v .... ....] > combo(LCTRL+RIGHT) #1 word right

    H       [!!!v .... ....] > key(BSP)  # Backspace
    ;       [!!!v .... ....] > key(DEL)
    O       [!!!v .... ....] > key(PGUP)
    .       [!!!v .... ....] > key(PGDOWN)
    Y       [!!!v .... ....] > key(HOME)
    U       [!!!v .... ....] > key(END)

    #Caps + Alt (Mod12): BOLD cursor control. (the deleting keys are too dangerous here) 
    J       [v!!v .... ....] > comboNtimes(LEFT,8)
    L       [v!!v .... ....] > comboNtimes(RIGHT,8)
    I       [v!!v .... ....] > comboNtimes(UP,8)
    K       [v!!v .... ....] > comboNtimes(DOWN,8)
    N       [v!!v .... ....] > comboNtimes(LCTRL+LEFT,8)
    M       [v!!v .... ....] > comboNtimes(LCTRL+RIGHT,8)
    O       [v!!v .... ....] > comboNtimes(PGUP,10)
    .       [v!!v .... ....] > comboNtimes(PGDOWN,10)
    Y       [v!!v .... ....] > combo(LCTRL+HOME) #because caps+ctrl+Y is hard to press
    U       [v!!v .... ....] > combo(LCTRL+END)  #dito

    #Undo Cut Copy Paste Redo
    A       [!!!v !!!! !!!!] > combo(LCTRL+Z)
    S       [!!!v !!!! !!!!] > combo(LCTRL+X)
    D       [!!!v !!!! !!!!] > combo(LCTRL+C)
    F       [!!!v !!!! !!!!] > combo(LCTRL+V)
    G       [!!!v !!!! !!!!] > combo(LCTRL+Y)

    Z       [!!!! !!!! !!v!] > combo(LCTRL+Z) #make sure Ctrl-Z is Undo even with Z<>Y remapping
    Y       [!!!! !!!! !!v!] > combo(LCTRL+Y)
    BSP     [!!!v .... ...!] > combo(LCTRL+Z)       #Caps+NotShift+Backspace = UNDO. Nice for 2 hands
    BSP     [!!!v .... ...v] > moddedKey(Y & ..v!)  #Caps+Shift+Backspace = REDO
    

# [TAB Layer]
# summons the Numpad
#
# TAB   IN PR SL PA NL    -  7  8  9  .  *  /  ENTR
# CAPS   …  …  …  …  …     <- 4  5  6  0  =  E||NTR 
# LS||H   …  …  …  …  …     +  1  2  3  R||SHIFT    

    M       [!!v! .!!! !!!!] > key(NP1)
    ,       [!!v! .!!! !!!!] > key(NP2)
    .       [!!v! .!!! !!!!] > key(NP3)
    J       [!!v! .!!! !!!!] > key(NP4)
    K       [!!v! .!!! !!!!] > key(NP5)
    L       [!!v! .!!! !!!!] > key(NP6)
    U       [!!v! .!!! !!!!] > key(NP7)
    I       [!!v! .!!! !!!!] > key(NP8)
    O       [!!v! .!!! !!!!] > key(NP9)
    ;       [!!v! .!!! !!!!] > key(NP0)

    Y       [!!v! !!!! !!!!] > key(NP-)
    H       [!!v! !!!! !!!!] > key(BSP)
    N       [!!v! !!!! !!!!] > key(NP+)
    P       [!!v! !!!! !!!!] > key(NP.)
    [       [!!v! !!!! !!!!] > key(NP*)
    ]       [!!v! !!!! !!!!] > key(NP/)
    '       [!!v! !!!! !!!!] > key(NP=) #'
    RET     [!!v! !!!! !!!!] > key(NPRET)

#extended numpad
    Q       [!!v! .... ....] > key(INS)
    W       [!!v! .... ....] > key(SYSRQ)   #[Print]
    E       [!!v! .... ....] > key(SCRLOCK) #[ScrollLock] what's the purpose of this key?
    R       [!!v! .... ....] > key(PAUSE)   #[Pause]
    T       [!!v! .... ....] > key(NUMLOCK)
    S       [!!v! .... ....] > moddedKey(SYSRQ & .... .... v...) #screenshot of window

# [CAPS + TAB] 
# Function keys on the NumPad (not that great, unless your keyboard has no dedicated F keys)

# TAB   …  …  …  …  …        F7 F8 F9 F11 F12 \
# CAPS   …  …  …  …  …        F4 F5 F6 F10 '  ENTER 
# LS||H   …  …  …  …  …        F1 F2 F3 /   RSHIFT   

    M       [!!vv .... ....] > key(F1)
    ,       [!!vv .... ....] > key(F2)
    .       [!!vv .... ....] > key(F3)
    J       [!!vv .... ....] > key(F4)
    K       [!!vv .... ....] > key(F5)
    L       [!!vv .... ....] > key(F6)
    U       [!!vv .... ....] > key(F7)
    I       [!!vv .... ....] > key(F8)
    O       [!!vv .... ....] > key(F9)
    ;       [!!vv .... ....] > key(F10)
    P       [!!vv .... ....] > key(F11)
    L\      [!!vv .... ....] > key(F12)
    
#For Function keys, restore the standard ALT key
    M       [v!vv .... ....] > moddedKey(F1 & v...)
    ,       [v!vv .... ....] > moddedKey(F2 & v...)
    .       [v!vv .... ....] > moddedKey(F3 & v...)
    J       [v!vv .... ....] > moddedKey(F4 & v...)
    K       [v!vv .... ....] > moddedKey(F5 & v...)
    L       [v!vv .... ....] > moddedKey(F6 & v...)
    U       [v!vv .... ....] > moddedKey(F7 & v...)
    I       [v!vv .... ....] > moddedKey(F8 & v...)
    O       [v!vv .... ....] > moddedKey(F9 & v...)
    ;       [v!vv .... ....] > moddedKey(F10 & v...)
    P       [v!vv .... ....] > moddedKey(F11 & v...)
    [       [v!vv .... ....] > moddedKey(F12 & v...)
    

# [MOD12 (ALT) Layer]  Special Characters
# TAB   !  @  #  $  %     ^  &  (  )  ?  ü  ß 
# CAPS   -  +  *  /  =     <- \  {  }  ö  ä 
# LS||H   `  ~  |  _  …     <  >  [  ] 

# Some duplicates, because a lot of programmer's key are on the right pinky,
# which stretches a lot and causes issues for me.

    #top row
    #the US Shift+Numbers, but one row lower. Same fingers less stretch.
    Q       [v.!! .... ....] > moddedKey(1 & .... ...v) #!
    W       [v.!! .... ....] > moddedKey(2 & .... ...v) #@
    E       [v.!! .... ....] > moddedKey(3 & .... ...v) ##
    R       [v.!! .... ....] > moddedKey(4 & .... ...v) #$
    T       [v.!! .... ....] > moddedKey(5 & .... ...v) #%

    Y       [v.!! .... ....] > moddedKey(6 & .... ...v) #^
    U       [v.!! .... ....] > moddedKey(7 & .... ...v) #&
    I       [v.!! .... ....] > moddedKey(9 & .... ...v) #(
    O       [v.!! .... ....] > moddedKey(0 & .... ...v) #)
    P       [v.!! .... ....] > moddedKey(/ & .... ...v) #?
    #middle row
    A       [v.!! .... ....] > key(-) #-
    S       [v.!! .... ....] > moddedKey(= & .... ...v) #+
    D       [v.!! .... ....] > moddedKey(8 & .... ...v) #*
    F       [v.!! .... ....] > key(/) #/
    G       [v.!! .... ....] > key(=) #=

    H       [v.!! .... ....] > key(BSP) #back
    J       [v.!! .... ....] > key(\) #\
    K       [v.!! .... ....] > moddedKey([ & .... ...v) #{
    L       [v.!! .... ....] > moddedKey(] & .... ...v) #}
    #bottom row
    Z       [v.!! .... ....] > key(`) #GRAVE
    X       [v.!! .... ....] > moddedKey(` & .... ...v) #~
    C       [v.!! .... ....] > moddedKey(\ & .... ...v) #|
    V       [v.!! .... ....] > moddedKey(- & .... ...v) #_
    B       [v.!! .... ....] > altChar(0133) # …

    N       [v.!! .... ....] > moddedKey(, & .... ...v) #<
    M       [v.!! .... ....] > moddedKey(. & .... ...v) #>
    ,       [v.!! .... ....] > key([) #[
    .       [v.!! .... ....] > key(]) #]

    #German chars
    # ö ä ü ß Ö Ä Ü 
    '       [v... .... ...!] > altChar(132) #ä
    '       [v... .... ...v] > altChar(142) #Ä
    ;       [v... .... ...!] > altChar(148) #ö
    ;       [v... .... ...v] > altChar(153) #Ö
    [       [v... .... ...!] > altChar(129) #ü
    [       [v... .... ...v] > altChar(154) #Ü
    ]       [v... .... ....] > altChar(225) #ß
    

# [MOD12-Tapped + CAPS-Tapped Layer]
#Super Duper Extra Special chars with Tapped Alt + Tapped Shift
#These must be defined before the "Tapped Alt without Tapped Shift" combos

# TAB   …  Σ  …  …  …     …  …  …  …  …  …  …  
# CAPS   …  …  …  …  …     …  …  …  …  …  …  
#         …  …  …  …  …     …  …  …  …  …  

    E       [T..T .... ...!] > altChar(228) # Σ Epsilon


# [MOD12-Tapped + CAPS-Tapped + Shift Layer]
#Super Duper Extra Hyper Special chars with Tapped Alt + Tapped Caps + Shift (just showing off here ;)
#These must be defined before the "Tapped Alt without Tapped Shift" combos

# TAB   …  ε  …  …  …     …  …  …  …  …  …  … 
# CAPS   …  …  …  …  …     …  …  …  …  …  …   
# LSHIFT  …  …  …  …  …     …  …  …  …  …   

    E       [T..T .... ...v] > altChar(238) # ε Epsilon

        
# [MOD12(ALT)-Tapped Layer]
#Very Special chars with Tapped Alt

# ESC  ¹  ²  ³                       º
# TAB   …  €  …  …  …     …  …  …  …  …  …  …  ENTR
# CAPS   …  …  °  …  ♀     …  …  …  …  …  …  E||NTR 
# LSHIFT   …  …  ©  …  …     ♂  …  …  …  …  SHIFT    
          
    0       [T... .... ....] > altChar(0186) #power 0
    1       [T... .... ....] > altChar(0185) #power 1
    2       [T... .... ....] > altChar(0178) #power 2
    3       [T... .... ....] > altChar(0179) #power 3
    E       [T... .... ....] > altChar(0128) #Euro
    C       [T... .... ....] > altChar(0169) #Copyright
    D       [T... .... ....] > altChar(248) #Degree
    M       [T... .... ....] > altChar(11) #Male
    F       [T... .... ....] > altChar(12) #Female


# NumPad + Control = more special chars on the NumPad and the virtual NumPad
#┌──────────────────────────┬────┐
#│ rectangles with Tab+Ctrl │    │
#├──────────────────────────┼────┘
#│ aint't it quaint?        │    
#└──────────────────────────┘

    #NUMPAD
    # .├┤┬
    # ┌─┐┴
    # │┼│
    # └─┘.
    # SP R
    NP-     [.... .... ..v!] > altChar(194)
    NP7     [.... .... ..v!] > altChar(218)
    NP8     [.... .... ..v!] > altChar(196)
    NP9     [.... .... ..v!] > altChar(191)
    NP/     [.... .... ..v!] > altChar(195)
    NP4     [.... .... ..v!] > altChar(179)
    NP5     [.... .... ..v!] > altChar(197)
    NP6     [.... .... ..v!] > altChar(179)
    NP*     [.... .... ..v!] > altChar(180)
    NP+     [.... .... ..v!] > altChar(193)
    NP1     [.... .... ..v!] > altChar(192)
    NP2     [.... .... ..v!] > altChar(196)
    NP3     [.... .... ..v!] > altChar(217)
    NP0     [.... .... ..v!] > moddedKey(SPACE & ..!.)

    #VIRTUAL NUMPAD
    #   ┬┌─┐
    #   ├│┼│┤
    #   ┴└─┘
    Y       [!.v! .... ..v!] > altChar(194)
    U       [!.v! .... ..v!] > altChar(218)
    I       [!.v! .... ..v!] > altChar(196)
    O       [!.v! .... ..v!] > altChar(191)
    H       [!.v! .... ..v!] > altChar(195)
    J       [!.v! .... ..v!] > altChar(179)
    K       [!.v! .... ..v!] > altChar(197)
    L       [!.v! .... ..v!] > altChar(179)
    ;       [!.v! .... ..v!] > altChar(180)
    N       [!.v! .... ..v!] > altChar(193)
    M       [!.v! .... ..v!] > altChar(192)
    ,       [!.v! .... ..v!] > altChar(196)
    .       [!.v! .... ..v!] > altChar(217)

# TAB + Control + Shift = even more special chars on the (virtual) NumPad
# ╔═══════════════════╦═══╗
# ║ same, with LShift ║   ║
# ╠═══════════════════╬═══╝
# ╚═══════════════════╝
#
    #NUMPAD
    # .╠╣╦
    # ╔═╗╩┴
    # ║╬║
    # ╚═╝.
    # . .
    NP-     [.... .... ..vv] > altChar(203)
    NP7     [.... .... ..vv] > altChar(201)
    NP8     [.... .... ..vv] > altChar(205)
    NP9     [.... .... ..vv] > altChar(187)
    NP/     [.... .... ..vv] > altChar(204)
    NP4     [.... .... ..vv] > altChar(186)
    NP5     [.... .... ..vv] > altChar(206)
    NP6     [.... .... ..vv] > altChar(186)
    NP*     [.... .... ..vv] > altChar(185)
    NP+     [.... .... ..vv] > altChar(202)
    NP1     [.... .... ..vv] > altChar(200)
    NP2     [.... .... ..vv] > altChar(205)
    NP3     [.... .... ..vv] > altChar(188)
    NP0     [.... .... ..vv] > moddedKey(SPACE & ..!!)

    #VIRTUAL NUMPAD
    #   ╦╔═╗
    #   ╠║╬║╣
    #   ╩╚═╝
    Y       [!.v! .... ..vv] > altChar(203)
    U       [!.v! .... ..vv] > altChar(201)
    I       [!.v! .... ..vv] > altChar(205)
    O       [!.v! .... ..vv] > altChar(187)
    H       [!.v! .... ..vv] > altChar(204)
    J       [!.v! .... ..vv] > altChar(186)
    K       [!.v! .... ..vv] > altChar(206)
    L       [!.v! .... ..vv] > altChar(186)
    ;       [!.v! .... ..vv] > altChar(185)
    N       [!.v! .... ..vv] > altChar(202)
    M       [!.v! .... ..vv] > altChar(200)
    ,       [!.v! .... ..vv] > altChar(205)
    .       [!.v! .... ..vv] > altChar(188)
    

# ─────────────────────────────────────────────────────────
# Caps + Numbers = AutoHotKey magic combos -> 10 clipboards
# Requires a corresponding AHK script.

    1       [...v .... ....] > combo(F14+1)
    2       [...v .... ....] > combo(F14+2)
    3       [...v .... ....] > combo(F14+3)
    4       [...v .... ....] > combo(F14+4)
    5       [...v .... ....] > combo(F14+5)
    6       [...v .... ....] > combo(F14+6)
    7       [...v .... ....] > combo(F14+7)
    8       [...v .... ....] > combo(F14+8)
    9       [...v .... ....] > combo(F14+9)
    0       [...v .... ....] > combo(F14+0)
    
    1       [...T .... ....] > combo(F15+1)
    2       [...T .... ....] > combo(F15+2)
    3       [...T .... ....] > combo(F15+3)
    4       [...T .... ....] > combo(F15+4)
    5       [...T .... ....] > combo(F15+5)
    6       [...T .... ....] > combo(F15+6)
    7       [...T .... ....] > combo(F15+7)
    8       [...T .... ....] > combo(F15+8)
    9       [...T .... ....] > combo(F15+9)
    0       [...T .... ....] > combo(F15+0)



# ╔════════════════════════════════════════════════════════════════════════════╗
# ║     ALPHA MAPPING LAYERS BELOW                                             ║
# ║ These layers contain simple "keyA to keyB" mappings.                       ║
# ║ Use them to configure DVORAK, COLMAK, or whatever custom layout you like.  ║
# ║ Switch alpha layers with [ESC]+[0..9]                                      ║
# ╚════════════════════════════════════════════════════════════════════════════╝

# simple style is:
#    A  B
#    X  RET
# This will remap key [A] to key [B]  and [X] to [Return]
# Good way to remap a few keys.

# power style is:  
#    MAPFROM  I N P U T
#    MAPTO    O U T P U
#    MAPEND
# This will map I->O, N->U, P->T, U->P, T->U
# MAPFROM and MAPTO *must* contain the same number of keys.
# Good way to define complete layouts. 
#
# You can format these 'maps' anyway you like, just have at least one blank between each key.
# This is the same map:
# MAPFROM  I      N
#             P      U
# MAPTO    O
#          U T P U
# MAPEND


[[MAP_ALPHA_LAYER_0]]
# This section stays empty. Special Layer 0 is hardcoded to do nothing at all, except listen for commands.
# This is useful to temporarily "escape" from a bad .ini, or when other people use the keyboard, or when a game does not gel with your keyboard config.
# Activate layer 0 with [ESC]+[0]
# Note that ESC+key commands work everywhere, including the Windows login screen.

 
[[MAP_ALPHA_LAYER_1]]   
layerName = QwertzJ
# the Z<>Y flip on US<>German keyboards f*ks with my muscle memory, and I cannot reconfigure my typewriters to QWERTY. So, QWERTZ it is for me...
# Backslash key on ANSI is Return on ISO, and the other way around. This sucks when you switch boards -> map Backslash to Return and all boards are consistent.
Y  Z
Z  Y
\  RET


[[MAP_ALPHA_LAYER_2]]
layerName = WorkmanJ  #Workman but with Shift, Enter and Z in the 'right' place
MAPFROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '  \
     z  x  c  v  b     n  m  ,  .
MAPTO
   q  d  r  w  b     z  f  u  p  ;  [  ]
    a  s  h  t  g     j  n  e  o  i  '  RET     # note the ' char triggers my editor
     y  x  m  c  v     k  l  ,  .
MAPEND


[[MAP_ALPHA_LAYER_3]]   
layerName = Workman  #Original Workman layout

MAPFROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
     z  x  c  v  b     n  m
MAPTO
   q  d  r  w  b     j  f  u  p  ;   
    a  s  h  t  g     y  n  e  o  i
     z  x  m  c  v     k  l
MAPEND


[[MAP_ALPHA_LAYER_4]]
layerName = Colemak

MAPFROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
     z  x  c  v  b     n  m
MAPTO
   q  w  f  p  g     j  l  u  y  ;
    a  r  s  t  d     h  n  e  i  o
     z  x  c  v  b     k  m
MAPEND


# qwfpb  jluy;[]
# arstg  kneio'\
# xcdvz  mh,./

[[MAP_ALPHA_LAYER_5]]
layerName = Colemak_Angle-Mod-DH

MAPFROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
  L\ z  x  c  v  b     n  m             # L\ = 'left backslash', only on ISO boards
MAPTO
   q  w  f  p  b     j  l  u  y  ;
    a  r  s  t  g     k  n  e  i  o
  z  x  c  d  v  L\    m  h
MAPEND


[[MAP_ALPHA_LAYER_6]]
layerName = DVORAK_Simplified_US

MAPFROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '
     z  x  c  v  b     n  m  ,  .  /
MAPTO
   '  ,  .  p  y     f  g  c  r  l  /  =     # closing the apos ' pair to help my editor
    a  o  e  u  i     d  h  t  n  s  -
     ;  q  j  k  x     b  m  w  v  z
MAPEND
