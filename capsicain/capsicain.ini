# Capsicain config file

#v35: new map for alt chars, new tappedAlt chars
#v36: KEY_MODIFIER_IFTAPPED_MAPPING
#v37: add LControlBlocksAlphaMapping, ProcessOnlyFirstKeyboard
#v38: add Workman Std, Colemak, Dvorak. Now with layerName
#v38b: rename to LControlLWinBlocksAlphaMapping
#v38c: add special chars ╔═╗║║╚╝╠╣╩╦ ┌─┐││└┘├┤┴┬ º¹²³
#v39: comment char is now #
#V40: changed key labels from 'DOT' to '.' and all similar cases. '[' was a pain...

# TODO: Ö sends shift ALT
#     smart config with layout instead of "a b"?

[[DEFAULTS]]
IniVersion 40	#any string, so you can check with [ESC]+[S] if you're running the right config

ActiveLayer 1	#Switch with [ESC]+[0..9]  
				#0=hardcoded = no changes at all
				#1=qwertz
				#2=WorkmanJ

DelayForKeySequenceMS 1 
				#System may drop keys when they are sent too fast. 
				#1 is the lower limit (max 1000 key events per second) on some machines.
				#5 is the lower limit when I'm inside a Linux VM
				#Decrease/Increase with '[' and ']' keys
				#NOTE: for RDP sessions, you want to set 'Options: Local Resources > Apply Windows Key combinations: On this machine'.
				#      Otherwise you need 10+ ms delay for reliable key sequences, depending on the network.


[[FEATURES]]    
# Note: You can comment out features you don't like

#Debug			#verbose logging. Switch with [ESC]+[D]

ProcessOnlyFirstKeyboard
				#if there is more than one keyboard (e.g. laptop with USB keyboard attached), 
				#Capsicain locks to the board that sends the first key stroke. 
				#Useful to have a "debugging" board with standard behavior, or a guest board at your workplace.

StartAHK		#on startup, start autohotkey.exe. Must be in the same directory as capsicain.exe.

ShiftShiftToShiftLock	
				#LSHIFT + RSHIFT = ShiftLock ON. RSHIFT + LSHIFT = ShiftLock OFF.
				#this makes the CapsLock key available for beautiful combos.

AltAltToAlt		
				#maps the combo [LALT]+[RALT] to [ALT] so you can use the very nicely positioned Alt keys for other things.
				#this feature requires that both Alt keys are mapped to MOD12 below.
				#sorry, this makes ALT+TAB uncomfortable

#FlipYZ			
				#flip Y and Z (US QWERTY to GER QWERTZ)
				#This is already defined in my alpha mappings below.
				#The feature allows you to switch on the fly without changing the config.
				#Switch with [ESC]+[Z]

FlipAltWinOnAppleKeyboards 
				#ALT<->WIN on both sides because Apple keyboard on Windows is irritating.
				#This feature has no effect on PC keyboards
				#Switch with [ESC]+[W]

LControlLWinBlocksAlphaMapping
				#Character keys are never remapped when LControl or LWin is down.
				#I don't want Ctrl+C to move with a Dvorak layout.


[[KEY_MODIFIER_IFTAPPED_MAPPING]]
# KEY will become MODIFIER, or KEY-B when tapped.
# NOP is the "No OPeration" key with scancode 0 ("nothing happens").
# Modifiers that are not defined here work as usual.
	CAPS	MOD9	NOP
	TAB		MOD10	TAB
	LALT	MOD12	NOP
	RALT	MOD12	NOP
	L\		LSHIFT	NOP
	/		RSHIFT	NOP


[[REF MODIFIERS]] 
# This reference section is not read (it is hardcoded)
# All modifier keys are assigned to a position in the modifier 'string'.

# NOTE: [10] is the same as [0010] and [0000 0000 0000 0010] (just like the number 42 = 0042 = 000000042. You can add and remove leading 0)

# NOTE: by default, these regular modifiers are forwarded to Windows.
	LSHIFT	[0000 0001]
	LCTRL	[0000 0010]
	LWIN	[0000 0100]
	LALT	[0000 1000]

	RSHIFT	[0001 0000]
	RCTRL	[0010 0000]
	RWIN	[0100 0000]
	RALT	[1000 0000]
	
#NOTE: by default, the 'custom' modifiers are blocked, not forwarded to Windows.
	MOD9	[0001 0000 0000]
	MOD10	[0010 0000 0000]
	MOD11	[0100 0000 0000]
	MOD12	[1000 0000 0000]

#I don't need these
#	MOD13	[0001 0000 0000 0000]
#	MOD14	[0010 0000 0000 0000]
#	MOD15	[0100 0000 0000 0000]
#   MOD16   not possible, there are max 15 modifiers.

#	possible symbols in place of the numbers: 
#			v	the modifier is down
#			!	the modifier is NOT down
#			T	the modifier was tapped.
#			.	don't care, forward to Windows

# EXAMPLES:
# A [...v]		is	key combo LeftShift + [the key that is usually labeled A].  All other modifiers may or may not be pressed.
# A [..v.]		is  LeftControl + A
# A [.v..]		is	LeftWin + A
# A [v...]		is  LeftAlt + A

# A [v..v]		is  LShift + LALT + A
# A [!..v]		is  LShift and NOT-LAlt + A
# B [...v ...v] is  RightShift + LeftShift + B

# C [...T]		is  Tapped-LShift + C
# D [.vTT]		is  Tapped-LShift, Tapped-LControl, Win + D

# A [.... .... ...v]	is	same as A [...v]
# E [...v .... ....]	is  MOD9 key + E

# F [vvvv vvvv] is  every standard modifier in da house + F
#				NOTE an issue called 'shadowing': many keyboards have limits about how many (and which) keys you can press at the same time.
#				For example, on my Apple keyboard, the [ESC]+[CapsLock] combo makes all keys on the home row (asdfg...) invisible.



[[MODIFIER_COMBOS]]	

	[		[!!v! !!!! !!!!] > key(*)


# This section defines all mappings that are not plain "keyA to keyB" mappings.
# These mappings are not touched by your alpha mapping ("QWERTZ layer", "DVORAK layer").
# These mappings may depend on your Windows keyboard layout; for example, 
#    sending "Shift+2" will produce [@] on US layout but ["] on GER layout.

# [MOD12 (ALT) Layer]
# TAB   !  @  #  $  %     ^  &  (  )  ?  ü  ß  ENTR
# CAPS   -  +  *  /  =     <- \  {  }  ö  ä  E||NTR 
# LS||H   `  ~  |  _  …     <  >  [  ]  R||SHIFT    
# LCT  LW  LAL                       RAL             

# [CAPS Layer]
# TAB   …  …  …  …  …     << >> ^  ^^ …  …  …  ENTR
# CAPS   UN CT CP PS RE    <- <  v  >  DL …  E||NTR
# LS||H   …  …  …  …        <! !> …  vv R||SHIFT    
# LCT  LW  LAL                       RAL             
 
# [TAB Layer]
# TAB   IN PR SL PA …     -  7  8  9  .  *  /  ENTR
# CAPS   …  …  …  …  …     <- 4  5  6  0  =  E||NTR 
# LS||H   …  …  …  …  …     +  1  2  3  R||SHIFT    
# LCT  LW  LAL                       RAL   

# [ALT-Tapped Layer]
# TAB   …  €  …  …  …     …  …  …  …  …  …  …  ENTR
# CAPS   …  …  °  …  ♀     …  …  …  …  …  …  E||NTR 
# LS||H   …  …  ©  …  …     ♂  …  …  …  R||SHIFT    
# LCT  LW  LAL                       RAL             

# [ALT-Tapped + Shift-Tapped Layer]
# TAB   …  Σ  …  …  …     …  …  …  …  …  …  …  ENTR
# CAPS   …  …  …  …  …     …  …  …  …  …  …  E||NTR 
# LS||H   …  …  …  …  …     …  …  …  …  R||SHIFT    
# LCT  LW  LAL                       RAL             


# Every time you press (modifier + key), the rules in this section are evaluated.
# The first match wins -> the order of the rules can matter.
# Pressing Ctrl+Shift+A matches both rules: 
# A [..v.] (equals Ctrl+A) and 
# A [..vv] (equals Ctrl+Shift+A).
# So either the more specific rule (A+Ctrl+Shift) must come first, 
# OR you explicitly make the rule A [..v!] (A+Ctrl+NotShift)

# Tapped modifiers are similar.
# TapControl+Shift+A  will match the rule A [...v] (Shift+A).
# Therefore, you must put the rule (A [..Tv]) *before* the rule (A [...v])
# There is no symbol for "not tapped".

#[CapsLock] summons Cursor control to the right hand
# Can be combined with the 8 regular modifiers, but not with the 'special' mods.
	J		[!!!v .... ....] > key(LEFT)  #note that Caps + Shift + J will result in Shift + Left
	L		[!!!v .... ....] > key(RIGHT)
	I		[!!!v .... ....] > key(UP)
	K		[!!!v .... ....] > key(DOWN)
	N		[!!!v .... ....] > combo(LCTRL+LEFT)  #1 word left
	M		[!!!v .... ....] > combo(LCTRL+RIGHT) #1 word right

	H		[!!!v .... ....] > key(BSP)
	;		[!!!v .... ....] > key(DEL)
	O		[!!!v .... ....] > key(PGUP)
	.		[!!!v .... ....] > key(PGDOWN)
	Y		[!!!v .... ....] > key(HOME)
	U		[!!!v .... ....] > key(END)

	#Caps + Alt (Mod12): BOLD cursor control. (the deleting keys are too dangerous here) 
	J		[v!!v .... ....] > comboNtimes(LEFT,8)
	L		[v!!v .... ....] > comboNtimes(RIGHT,8)
	I		[v!!v .... ....] > comboNtimes(UP,8)
	K		[v!!v .... ....] > comboNtimes(DOWN,8)
	N		[v!!v .... ....] > comboNtimes(LCTRL+LEFT,8)
	M		[v!!v .... ....] > comboNtimes(LCTRL+RIGHT,8)
	O		[v!!v .... ....] > comboNtimes(PGUP,10)
	.		[v!!v .... ....] > comboNtimes(PGDOWN,10)
	Y		[v!!v .... ....] > combo(LCTRL+HOME) #because caps+ctrl+Y is hard to press
	U		[v!!v .... ....] > combo(LCTRL+END)  #dito

	#Undo Cut Copy Paste Redo
	A		[!!!v !!!! !!!!] > combo(LCTRL+Z)
	S		[!!!v !!!! !!!!] > combo(LCTRL+X)
	D		[!!!v !!!! !!!!] > combo(LCTRL+C)
	F		[!!!v !!!! !!!!] > combo(LCTRL+V)
	G		[!!!v !!!! !!!!] > combo(LCTRL+Y)

	Z		[!!!! !!!! !!v!] > combo(LCTRL+Z) #make sure Ctrl-Z is Undo even with Z<>Y remapping
	Y		[!!!! !!!! !!v!] > combo(LCTRL+Y)
	BSP		[!!!v .... ...!] > combo(LCTRL+Z)		#Caps+Backspace = UNDO. Nice for 2 hands
	BSP		[!!!v .... ...v] > moddedKey(Y & ..v!)	#Caps+Shift+Backspace = REDO
	

#[TAB] summons the Numpad
#-789.*/
#<4560=
#+123	
	M		[!!v! .!!! !!!!] > key(NP1)
	,		[!!v! .!!! !!!!] > key(NP2)
	.		[!!v! .!!! !!!!] > key(NP3)
	J		[!!v! .!!! !!!!] > key(NP4)
	K		[!!v! .!!! !!!!] > key(NP5)
	L		[!!v! .!!! !!!!] > key(NP6)
	U		[!!v! .!!! !!!!] > key(NP7)
	I		[!!v! .!!! !!!!] > key(NP8)
	O		[!!v! .!!! !!!!] > key(NP9)
	;		[!!v! .!!! !!!!] > key(NP0)

	Y		[!!v! !!!! !!!!] > key(NP-)
	H		[!!v! !!!! !!!!] > key(BSP)
	N		[!!v! !!!! !!!!] > key(NP+)
	P		[!!v! !!!! !!!!] > key(NP.)
	[		[!!v! !!!! !!!!] > key(*)
	]		[!!v! !!!! !!!!] > key(/)
	'		[!!v! !!!! !!!!] > key(=) #'
	RET		[!!v! !!!! !!!!] > key(NPENT)

#extended numpad
	Q		[!!v! .... ....] > key(INS)
	W		[!!v! .... ....] > key(SYSRQ)
	E		[!!v! .... ....] > key(SCRLOCK) #what's the purpose of this key?
	R		[!!v! .... ....] > key(PAUSE)	#dito
	S 		[!!v! .... ....] > moddedKey(SYSRQ & .... .... v...) #screenshot of window

#Function keys: Numpad + Caps (not that great, unless your keyboard has no dedicated F keys)
#F7 F8 F9 F11 F12
#F4 F5 F6 F10
#F1 F2 F3
	M		[!!vv .... ....] > key(F1)
	,		[!!vv .... ....] > key(F2)
	.		[!!vv .... ....] > key(F3)
	J		[!!vv .... ....] > key(F4)
	K		[!!vv .... ....] > key(F5)
	L		[!!vv .... ....] > key(F6)
	U		[!!vv .... ....] > key(F7)
	I		[!!vv .... ....] > key(F8)
	O		[!!vv .... ....] > key(F9)
	;		[!!vv .... ....] > key(F10)
	P		[!!vv .... ....] > key(F11)
	L\		[!!vv .... ....] > key(F12)
	
#For Function keys, restore the standard ALT key
	M		[v!vv .... ....] > moddedKey(F1 & v...)
	,		[v!vv .... ....] > moddedKey(F2 & v...)
	.		[v!vv .... ....] > moddedKey(F3 & v...)
	J		[v!vv .... ....] > moddedKey(F4 & v...)
	K		[v!vv .... ....] > moddedKey(F5 & v...)
	L		[v!vv .... ....] > moddedKey(F6 & v...)
	U		[v!vv .... ....] > moddedKey(F7 & v...)
	I		[v!vv .... ....] > moddedKey(F8 & v...)
	O		[v!vv .... ....] > moddedKey(F9 & v...)
	;		[v!vv .... ....] > moddedKey(F10 & v...)
	P		[v!vv .... ....] > moddedKey(F11 & v...)
	[		[v!vv .... ....] > moddedKey(F12 & v...)
	

# Special chars.
# Some duplicates, because a lot of programmer's key are on the right pinky,
# which stretches a lot and causes issues for me.
#	!@#$% ^&()?üß
#	-+*/= B\{}öä
#	`~|_x <>[] 

	#top row
	#the US Shift+Numbers, but one row lower. Same fingers less stretch.
	Q		[v.!! .... ....] > moddedKey(1 & .... ...v) #!
	W		[v.!! .... ....] > moddedKey(2 & .... ...v) #@
	E		[v.!! .... ....] > moddedKey(3 & .... ...v) ##
	R		[v.!! .... ....] > moddedKey(4 & .... ...v) #$
	T		[v.!! .... ....] > moddedKey(5 & .... ...v) #%

	Y		[v.!! .... ....] > moddedKey(6 & .... ...v) #^
	U		[v.!! .... ....] > moddedKey(7 & .... ...v) #&
	I		[v.!! .... ....] > moddedKey(9 & .... ...v) #(
	O		[v.!! .... ....] > moddedKey(0 & .... ...v) #)
	P		[v.!! .... ....] > moddedKey(/ & .... ...v) #?
	#middle row
	A		[v.!! .... ....] > key(-) #-
	S		[v.!! .... ....] > moddedKey(= & .... ...v) #+
	D		[v.!! .... ....] > moddedKey(8 & .... ...v) #*
	F		[v.!! .... ....] > key(/) #/
	G		[v.!! .... ....] > key(=) #=

	H		[v.!! .... ....] > key(BSP) #back
	J		[v.!! .... ....] > key(\) #\
	K		[v.!! .... ....] > moddedKey([ & .... ...v) #{
	L		[v.!! .... ....] > moddedKey(] & .... ...v) #}
	#bottom row
	Z		[v.!! .... ....] > key(`) #GRAVE
	X		[v.!! .... ....] > moddedKey(` & .... ...v) #~
	C		[v.!! .... ....] > moddedKey(\ & .... ...v) #|
	V		[v.!! .... ....] > moddedKey(- & .... ...v) #_
	B		[v.!! .... ....] > altChar(0133) # …

	N		[v.!! .... ....] > moddedKey(, & .... ...v) #<
	M		[v.!! .... ....] > moddedKey(. & .... ...v) #>
	,		[v.!! .... ....] > key([) #[
	.		[v.!! .... ....] > key(]) #]

#German chars
	# ö ä ü ß Ö Ä Ü 
	'		[v... .... ...!] > altChar(132) #ä
	'		[v... .... ...v] > altChar(142) #Ä
	;		[v... .... ...!] > altChar(148) #ö
	;		[v... .... ...v] > altChar(153) #Ö
	[		[v... .... ...!] > altChar(129) #ü
	[		[v... .... ...v] > altChar(154) #Ü
	]		[v... .... ....] > altChar(225) #ß
	
		
#Super Duper Extra Special chars with Tapped Alt + Tapped Shift (just showing off here #)
#These must be defined before the "Tapped Alt without Tapped Shift" combos
	#Σ
	E		[T... .... ...T] > altChar(228) #Epsilon

#Very Special chars with Tapped Alt
	# º ¹ ² ³ € © ° ♂ ♀ 
	0		[T... .... ....] > altChar(0186) #power 0
	1		[T... .... ....] > altChar(0185) #power 1
	2		[T... .... ....] > altChar(0178) #power 2
	3		[T... .... ....] > altChar(0179) #power 3
	E		[T... .... ....] > altChar(0128) #Euro
	C		[T... .... ....] > altChar(0169) #Copyright
	D		[T... .... ....] > altChar(248) #Degree
	M		[T... .... ....] > altChar(11) #Male
	F		[T... .... ....] > altChar(12) #Female


#more special chars on the virtual NumPad
#┌──────────────────────────┬────┐
#│ rectangles with Tab+Ctrl │    │
#├──────────────────────────┼────┘
#│ aint't it quaint?        │    
#└──────────────────────────┘
#   ┬┌─┐
#   ├│┼│┤
#   ┴└─┘
	Y		[!.v! .... ..v!] > altChar(194)
	U		[!.v! .... ..v!] > altChar(218)
	I		[!.v! .... ..v!] > altChar(196)
	O		[!.v! .... ..v!] > altChar(191)
	H		[!.v! .... ..v!] > altChar(195)
	J		[!.v! .... ..v!] > altChar(179)
	K		[!.v! .... ..v!] > altChar(197)
	L		[!.v! .... ..v!] > altChar(179)
	;		[!.v! .... ..v!] > altChar(180)
	N		[!.v! .... ..v!] > altChar(193)
	M		[!.v! .... ..v!] > altChar(192)
	,		[!.v! .... ..v!] > altChar(196)
	.		[!.v! .... ..v!] > altChar(217)

# ╔═══════════════════╦═══╗
# ║ same, with LShift ║   ║
# ╠═══════════════════╬═══╝
# ╚═══════════════════╝
#   ╦╔═╗
#   ╠║╬║╣
#   ╩╚═╝
	Y		[!.v! .... ..vv] > altChar(203)
	U		[!.v! .... ..vv] > altChar(201)
	I		[!.v! .... ..vv] > altChar(205)
	O		[!.v! .... ..vv] > altChar(187)
	H		[!.v! .... ..vv] > altChar(204)
	J		[!.v! .... ..vv] > altChar(186)
	K		[!.v! .... ..vv] > altChar(206)
	L		[!.v! .... ..vv] > altChar(186)
	;		[!.v! .... ..vv] > altChar(185)
	N		[!.v! .... ..vv] > altChar(202)
	M		[!.v! .... ..vv] > altChar(200)
	,		[!.v! .... ..vv] > altChar(205)
	.		[!.v! .... ..vv] > altChar(188)
	

# ──────────────────────────────────────────────────
# AutoHotKey magic combos -> 10 clipboards
	1		[...v .... ....] > combo(F14+1)
	2		[...v .... ....] > combo(F14+2)
	3		[...v .... ....] > combo(F14+3)
	4		[...v .... ....] > combo(F14+4)
	5		[...v .... ....] > combo(F14+5)
	6		[...v .... ....] > combo(F14+6)
	7		[...v .... ....] > combo(F14+7)
	8		[...v .... ....] > combo(F14+8)
	9		[...v .... ....] > combo(F14+9)
	0		[...v .... ....] > combo(F14+0)
	
	1		[...T .... ....] > combo(F15+1)
	2		[...T .... ....] > combo(F15+2)
	3		[...T .... ....] > combo(F15+3)
	4		[...T .... ....] > combo(F15+4)
	5		[...T .... ....] > combo(F15+5)
	6		[...T .... ....] > combo(F15+6)
	7		[...T .... ....] > combo(F15+7)
	8		[...T .... ....] > combo(F15+8)
	9		[...T .... ....] > combo(F15+9)
	0		[...T .... ....] > combo(F15+0)



# ╔════════════════════════════════════════════════════════════════════════════╗
# ║		ALPHA LAYERS BELOW                                                     ║
# ║ These layers contain simple "keyA to keyB" mappings.                       ║
# ║ Use them to configure DVORAK, COLMAK, or whatever custom layout you like.  ║
# ║ Switch alpha layers with [ESC]+[0..9]                                      ║
# ╚════════════════════════════════════════════════════════════════════════════╝


[[LAYER0]]
# This section stays empty. Special Layer 0 is hardcoded to do nothing at all, except listening for commands.
# This is useful to temporarily "escape" from a bad .ini, or when other people use the keyboard, or when a game does not gel with your keyboard config.
# Activate layer 0 with [ESC]+[0]



# [QwertzJ Layer]
# TAB   q  w  e  r  t     z  u  i  o  p  …  …  ENTR
# CAPS   a  s  d  f  g     h  j  k  l  ;  '  E||NTR 
# LS||H   y  x  c  v  b     n  m  ,  .  R||SHIFT    
# LCT  LW  LAL                       RAL     
[[LAYER1]]	
layerName = QwertzJ
# the Z<>Y flip on US<>German keyboards f*ks with my muscle memory, and I cannot reconfigure my typewriters to QWERTY. So, QWERTZ it is for me...
# Backslash key on ANSI is Return on ISO, and the other way around. This sucks when you switch boards. So, map Backslash to Return and all is consistent.
	\ RET

	Y Z
	Z Y


# [WorkmanJ Layer]
# TAB   q  d  r  w  b     z  f  u  p  ;  …  …  ENTR
# CAPS   a  s  h  t  g     j  n  e  o  i  '  E||NTR 
# LS||H   y  x  m  c  v     k  l  ,  .  R||SHIFT    
# LCT  LW  LAL                       RAL     
[[LAYER2]]	
layerName = WorkmanJ  #workman but with Shift, Enter and Z in the 'right' place

	\ RET

#	Q Q
	W D
	E R
	R W
	T B
	Y Z
	U F
	I U
	O P
	P ;
	   	 
#	A A
#	S S
	D H
	F T
#	G G
	H J
	J N
	K E
	L O
	; I

	Z Y
#	X X
	C M
	V C
	B V
	N K
	M L


# [Workman Layer]
# TAB   q  d  r  w  b     j  f  u  p  ;  [  ]  \
# CAPS   a  s  h  t  g     y  n  e  o  i  '  \ ENTER 
# LS||H   z  x  m  c  v     k  l  ,  .  /  SHIFT    
# LCT  LW  LAL                       RAL     
[[LAYER3]]	
layerName = Workman  #Original Workman layout
#	Q Q
	W D
	E R
	R W
	T B
	Y J
	U F
	I U
	O P
	P ;
	   	 
#	A A
#	S S
	D H
	F T
#	G G
	H Y
	J N
	K E
	L O
	; I

#	Z Z
#	X X
	C M
	V C
	B V
	N K
	M L


# qwfpg  jluy;[]
# arstd  hneio'\
# zxcvb  km,./
[[LAYER4]]
layerName = Colemak
#	Q Q
#	W W
	E F
	R P
	T G
	Y J
	U L
	I U
	O Y
	P ;
	   	 
#	A A
	S R
	D S
	F T
	G D
#	H H
	J N
	K E
	L I
	; O

#	Z Z
#	X X
#	C C
#	V V
#	B B
	N K
#	M M

# qwfpb  jluy;[]
# arstg  kneio'\
# xcdvz  mh,./

# qwfpg  jluy;[]
# arstd  hneio'\
# zxcvb  km,./
[[LAYER5]]
layerName = Colemak_Mod-DH
#	Q Q
#	W W
	E F
	R P
	T B
	Y J
	U L
	I U
	O Y
	P ;
	   	 
#	A A
	S R
	D S
	F T
#	G G
	H K
	J N
	K E
	L I
	; O

	Z X
	X C
	C D
#	V V
	B Z  #for ANSI. For ISO boards, "LBSLASH Z" and "B BSLASH" is recommended.
	N M
	M H


# ',.py  fgcrl/=\
# aoeui  dhtns-
# ;qjkx  bmwvz
[[LAYER6]]
layerName = DVORAK_Simplified_US
	Q '  #'
	W ,
	E .
	R P
	T Y
	Y F
	U G
	I C
	O R
	P L
	[ /
	] =
	   	 
#	A A
	S O
	D E
	F U
	G I
	H D
	J H
	K T
	L N
	; S
	' - #'

	Z ;
	X Q
	C J
	V K
	B X
	N B
	M M
	, W
	. V
	/ Z
