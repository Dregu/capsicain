
# Capsicain config file

# This is the config that I use myself.
# Layer 1+2 use my "KingCon / King Configuration"; its aim is that no finger must move more than one key (like the King in Chess)
# Requires that the Windows keyboard layout is set to standard US-English

# TODO: 
#     öäü do not react to CapsLock ON

#v35: new map for alt chars, new tappedAlt chars
#v36: KEY_MODIFIER_IFTAPPED_MAPPING
#v37: add LControlBlocksAlphaMapping, ProcessOnlyFirstKeyboard
#v38: add Workman Std, Colemak, Dvorak. Now with layerName
#v38b: rename to LControlLWinBlocksAlphaMapping
#v38c: add special chars ╔═╗║║╚╝╠╣╩╦ ┌─┐││└┘├┤┴┬ º¹²³
#v39: comment char is now #
#V40: changed key labels from 'DOT' to '.' and all similar cases. '[' was a pain...
#v41: introduced ALPHA_FROM-ALPHA_TO-ALPHA_END.
#v42: cleanup
#v43: changed some NumPad key labels, put ┌─┐╚═╝ on NumPad
#v44: enabled layer-specific sections (undone with v45...)
#v45: modular; tagged lines with INCLUDE, GLOBAL/OPTION/MODIFIER/COMBO/ALPHA_FROM-ALPHA_TO-ALPHA_END
#v46: sequence() function. Redefine mod state to &^T. Rename ShiftShiftToShiftLock
#v46b: rules for capsAlt-H,S,D,F and caps-QWER, YXCVB
#v47: can map key to ESC. REWIRE for non-modifiers too. map A B LOCK
#v47b: remove LOCKs. Too many accidents. Experimental section that reuses the number row.
#v48: cleanup. Can now map GRAVE to ESC (eXit and layer change require original ESC key). 
#v49: removed REWIRE A B LOCK. Lock with ESC+modifier, unlock with ESC. Much more reliable.
#v49b: suppress Win tapped

GLOBAL IniVersion 48
                #any string, so you can check with [ESC]+[S] if you're running the right config

GLOBAL ActiveLayerOnStartup 1
                #This layer is active on startup
                #Switch later with [ESC]+[0..9]  
                #0=hardcoded = no changes at all
                #1=QwertzJ  with KingCon
                #2=WorkmanJ with KingCon
                #3=Workman std
                #4=Colemak std
                #5=Colemak Angle-Mod-DH
                #6=Dvorak simplified US
                #9=Test config

GLOBAL DebugOnStartup
                #this is a developer feature; Debugging output during startup
#NOTE: the GLOBAL settings are outside of any section.


# NOTE: you can put all your settings directly into one layer.
#       To reuse and reconfigure functionality more easily, you can put groups of settings into [YOUR_NEW_SECTION],
#       and include that section in your layer with  INCLUDE YOUR_NEW_SECTION
# The sections [LAYER_1] .. [LAYER_9] are special: they can be switched with [ESC] + [1..9]

[LAYER_1]
OPTION layerName QwertzJ-KingCon
OPTION debug
INCLUDE KINGCON_ALL_SECTIONS_BUT_LAYOUT
INCLUDE LAYOUT_QWERTZ

[LAYER_2]
OPTION LayerName WorkmanJ-KingCon
INCLUDE KINGCON_ALL_SECTIONS_BUT_LAYOUT
INCLUDE LAYOUT_WORKMANJ

[LAYER_3]
OPTION LayerName Workman_std
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_WORKMAN

[LAYER_4]
OPTION LayerName Colemak_std
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_COLEMAK

[LAYER_5]
OPTION LayerName Colemak_MOD
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_COLEMAK_MOD

[LAYER_6]
OPTION LayerName Dvorak_std
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_DVORAK

[LAYER_9]
OPTION LayerName Test
OPTION debug
INCLUDE LAYOUT_QWERTZJ
ALPHA_FROM Y
ALPHA_TO   X
ALPHA_END
COMBO  M   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  M   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  N   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  N   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,10)
COMBO  O   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  O   [&^^& .... ....] > comboNtimes(LCTRL+UP,8)
MODIFIER caps ralt nop
MODIFIER caps ralt nop  #double definition, ignored
MODIFIER caps ralt caps #redefinition, error
MODIFIER caps lalt nop  #redefinition, error
MODIFIER rshf lshf nop  #both shift to lshift
MODIFIER TAB MOD12 NOP
COMBO  X   [&^^^ .... ....] > sequence (&LSHF_&LSHF_&LSHF_&LSHF_&H_^H_^LSHF_&E_^E_&J_^J_&LSHF_&1_^1_^LSHF)  #Hello!
COMBO  C   [&^^^ .... ....] > sequence (&LSHF_H_^LSHF_e_l_l_o_&LSHF_1)  #error no lshf up
COMBO  V   [&^^^ .... ....] > sequence (&LSHF_H_^LSHF_e_l_l_o_PAUSE:10_&LSHF_1_^LSHF_PAUSE:10_h_o_w_SPACE_PAUSE:3_a_r_e_PAUSE:3_SPACE_Y_O_U_&LSHF_/_^LSHF)  #pause 1s before 1


#Collect the many sections for the 'KingCon' config into one 'super-module'
#The order of the includes may matter - the first matching rule always wins.
[KINGCON_ALL_SECTIONS_BUT_LAYOUT]
INCLUDE KINGCON_OPTIONS
INCLUDE KINGCON_REWIRE
INCLUDE KINGCON_CAPS_TO_CURSOR_CONTROL
INCLUDE KINGCON_CAPS_TO_CONTROL-X
INCLUDE KINGCON_TAB_TO_NUMPAD
INCLUDE KINGCON_CAPS+TAB_TO_FUNCTION
INCLUDE KINGCON_ALT_TO_SPECIAL_CHARS
INCLUDE KINGCON_ALT_TO_GERMAN_CHARS
INCLUDE KINGCON_ALT_TAPPED+CAPS_TAPPED_TO_EXTRA_CHARS
INCLUDE KINGCON_ALT_TAPPED+CAPS_TAPPED+SHIFT_TO_SUPEREXTRA_CHARS
INCLUDE KINGCON_ALT_TAPPED_TO_VERY_SPECIAL_CHARS
INCLUDE KINGCON_NUMPAD+CONTROL_TO_TABLE1
INCLUDE KINGCON_NUMPAD+CONTROL+SHIFT_TO_TABLE2
INCLUDE CAPS+NUMBERS_TO_AHK_CLIPBOARDS
INCLUDE CTRL_TAPPED+ALT_TAPPED_TO_MACRO


# ╔════════════════════════════════════════════════════════════════════════╗
# ║     OPTIONS: ENABLE / DISABLE FEATURES                                 ║
# ║  You can comment out features you don't like.                          ║
# ╚════════════════════════════════════════════════════════════════════════╝
[KINGCON_OPTIONS]

#OPTION Debug          
                #verbose logging. Switch with [ESC]+[D]
				#This is 5x slower than without debug output, but you probably won't notice

OPTION DelayForKeySequenceMS 0 
                #System may drop keys when they are sent too fast. 
                #1 is the lower limit for reliable operation on some machines.
                #5 is the lower limit when I'm inside a Linux VM
                #Decrease/Increase with [ESC] + [,] and [.] keys
                #NOTE: for RDP sessions, you want to set 'Options > Local Resources > Apply Windows Key combinations: On this machine'.
                #      Otherwise you need 10+ ms delay for reliable key sequences, depending on the network.
                #NOTE: the Windows Sleep function is not precise; '1ms' may actually sleep 1 or 20ms depending on thread scheduling.

OPTION ProcessOnlyFirstKeyboard
                #if there is more than one keyboard (e.g. laptop with USB keyboard attached), 
                #Capsicain will process only the board that sends the first key stroke. 
                #Useful to have a "debugging" board with standard behavior, or a guest board at your workplace.

OPTION StartAHK        
                #on startup, start autohotkey.exe if it is not running. Must be in the same directory as capsicain.exe.

OPTION ShiftShiftToCapsLock   
                #[LSHIFT] + [RSHIFT] = ShiftLock ON. [RSHIFT] + [LSHIFT] = ShiftLock OFF.
                #this makes the beautiful CapsLock key available for combos.
                #I like this: OFF means OFF, no matter what the current CapsLock state is.

OPTION AltAltToAlt     
                #maps the combo [LALT]+[RALT] to [ALT] so you can use the very nicely positioned Alt keys for other things.
                #this feature requires that both Alt keys are mapped to MOD12 below.
                #sorry, this makes ALT+TAB uncomfortable

#OPTION FlipYZ         
                #flip Y and Z keys (US QWERTY to GER QWERTZ)
                #This is already defined in my Qwertz alpha mapping below.
                #The feature allows you to switch anytime without changing the config.
                #Switch with [ESC]+[Z]

OPTION FlipAltWinOnAppleKeyboards 
                #[ALT] <-> [WIN] on both sides because Apple keyboard on Windows is irritating.
                #This feature has no effect on PC keyboards.
                #Switch with [ESC]+[W]

OPTION LControlLWinBlocksAlphaMapping
                #Character keys are never remapped when [LControl] or [LWin] is down.
                #I don't want Ctrl+C to move with a Dvorak layout.



# ╔════════════════════════════════════════════════════════════════════════╗
# ║     DEFINE 'HARD' KEY REWIRING                                         ║
# ║                                                                        ║
# ║  Maps Key A to Key B, (or to Key C when tapped)                        ║
# ║  The REWIREs are done before combos are evaluated.                     ║
# ║  When Rewire [X] to [Y], then Ctrl-X is seen as Ctrl-Y                 ║
# ║                                                                        ║
# ║  Use Key B = "NOP" ("No OPeration") to disable a key                   ║
# ║                                                                        ║
# ║  Key C should only be a normal key, no modifier.                       ║
# ║  Key C can only be assigned to modifiers.                              ║
# ║                                                                        ║
# ║  Modifiers that are not defined here work as usual.                    ║
# ║  Modifier labels are:                                                  ║
# ║                   LSHF  LCTRL  LWIN  LALT                              ║
# ║                   RSHF  RCTRL  RWIN  RALT                              ║
# ║                   MOD9  MOD10  MOD11 MOD12                             ║
# ║                   MOD13 MOD14  MOD15                                   ║
# ╚════════════════════════════════════════════════════════════════════════╝
[KINGCON_REWIRE]
#          Key     To Modifer  (To Key If Tapped)
REWIRE     L\      LSHF             # L\ is the label for 'Left Backslash key'; it exists only on ISO boards (between Shift and Z).
REWIRE     /       RSHF        
REWIRE     CAPS    MOD9
REWIRE     TAB     MOD10       TAB
REWIRE     LALT    MOD12       
REWIRE     RALT    MOD12       
REWIRE     `       ESC         
REWIRE     \       RET         
REWIRE     -       NOP         
REWIRE     =       NOP         
REWIRE     LWIN    LWIN        LSHF  #suppress Win-tap opening Start menu, by sending Shift down&up

[REWIRE_NONUMBERS_EXPERIMENT]
#Put Caps, Tab, Shift modifiers and Return on the number row.
#Reasonably easy to hit reliably, no pinky stretch, and the numbers are on the numpad anyway, and difficult to hit cleanly.
#It's quicker to hit the real caps key, though...
REWIRE     0       RET
REWIRE     1       NOP         
REWIRE     2       MOD10       
REWIRE     3       NOP         
REWIRE     6       NOP         
REWIRE     7       NOP         
REWIRE     9       NOP         
REWIRE     4       MOD9          #use 4/8 instead of Caps?
REWIRE     8       MOD9        
REWIRE     8       MOD9        
REWIRE     5       LSHF        #third shift in top row to help with shift-caps combos


# NOTE: Be careful with using alpha keys as modifiers.
#       Tapped modifiers trigger on key UP. For example, if you map key [A] to LShift and "A" if tapped,
#       then the A key seems to work normally, BUT this will mess up fast typing with 'interleaved' key strokes:
#       when you press A-down, S-down, A-up, S-up  ->  Shift-S instead of "as"


# ╔════════════════════════════════════════════════════════════════════════╗
# ║     MUST KNOW: MODIFIER STATUS STRINGS                                 ║
# ║  This reference section is not read (it is hardcoded).                 ║
# ║  You must understand this to define key combos.                        ║
# ╚════════════════════════════════════════════════════════════════════════╝
[REFERENCE: MODIFIER STATUS STRINGS]
NOTE: All [Reference*  sections are ignored.
The info below is hardcoded into Capsicain.

MODIFIER POSITION:
All modifier keys are assigned to a position in the [...modifier.state.string..].

┌Invalid
│┌MOD15
││┌MOD14
│││┌MOD13
││││
││││ ┌MOD12
││││ │┌MOD11
││││ ││┌MOD10
││││ │││┌MOD9
││││ ││││ 
││││ ││││ ┌Right Alt
││││ ││││ │┌Right Win
││││ ││││ ││┌Right Control
││││ ││││ │││┌Right Shift
││││ ││││ ││││ 
││││ ││││ ││││ ┌Left Alt
││││ ││││ ││││ │┌Left Win
││││ ││││ ││││ ││┌Left Control
││││ ││││ ││││ │││┌Left Shift
││││ ││││ ││││ ││││
 FED CBA9 8765 4321  <- Position


MODIFIER STATE SYMBOLS:
Symbols for modifier state, replacing the 1 2 3 .. F in the diagram above: 
        &   AND: the modifier is down
        ^   NOT: the modifier is up
        T   the modifier was tapped. You can combine as many tapped and pressed modifiers as you want.
        .   ignore this modifier, just forward its state to Windows

EXAMPLES:
modifier string [.... .... .... ...&.] means "Left Control is down"
modifier string [&.] means the same. Leading '.' are optional (just like leading 0 are optional in numbers, 00020 = 20)

 A [...&]       is  key combo [LeftShift] + key [A].  All other modifiers may or may not be pressed.
 A [..&.]       is  LeftControl + A
 A [.&..]       is  LeftWin + A
 A [&...]       is  LeftAlt + A
 A [...& ....]  is  RShift + A

 A [&..&]       is  LShift + LAlt + A
 A [^..&]       is  LShift and NOT-LAlt + A
 B [...& ...&]  is  RightShift + LeftShift + B

 C [...T]       is  Tapped-LShift + C
 D [.&TT]       is  Tapped-LShift, Tapped-LControl, Win + D

 A [.... .... ...&] is  same as A [...&]
 E [...& .... ....] is  MOD9 key + E.  I map [CapsLock] to MOD9 in the 'cajhin' config.

 F [&&&& &&&&]  is  every standard modifier in da house + F

NOTE an issue called 'shadowing': many keyboards have limits about how many (and which) keys you can press at the same time.
    For example, on my Apple keyboard, the [ESC]+[CapsLock] combo shadows (blocks) all keys on the home row (asdfg hjkl).

NOTE we are dealing with physical keys here, NOT with characters. 
   "key A" means "the electrical switch on the left side that sends scancode #30 - on a standard US IBM keyboard it has a plastic keycap with an A printed on it".
   In other words, the labels on *your* keyboard do not matter. Deep down the driver stack, the labels on the IBM Model M (US) keyboard are the only truth.
   If the key in the lower left corner is labeled "Y" on your Euro keyboard, this is *still* scancode #44 = "SC_Z" = keyLabel 'Z'. 
   The usual mapping to character Y (or whatever character) happens later, with the Windows keyboard layout.

NOTE: there is no symbol for OR. If you want Ctrl+A to work with both control keys, you must define two rules,
      for LCtrl+A  and  RCtrl+A.
	  As an alternative, if you never distinguish between the two control keys, you can simply 
	  map RCtrl to LCtrl with "MODIFIER RCTRL LCTRL NOP"

NOTE: By default, the eight regular modifiers are forwarded to Windows. The virtual modifier keys MOD9..MOD15 are never sent out.
NOTE: MOD16 is not possible, there are 'only' 15 modifiers. We could extend to 31 by changing a few data types, but why?



# ╔═════════════════════════════════════════════════════════════════════════════════════════╗
# ║     MODIFIER+KEY COMBOS BELOW                                                           ║
# ║ Keyword "COMBO" defines all mappings that are not plain "keyA to keyB" mappings.        ║
# ║ These mappings are NOT changed by your alpha layout ("QWERTZ layout", "DVORAK layout")  ║
# ║       Ctrl+Z is evaluated before "plain key Z" is mapped to "key Y"                     ║
# ║ The output of these mappings may depend on your Windows keyboard layout; for example,   ║
# ║       sending "Shift+2" will produce [@] on US layout but ["] on GER layout.            ║
# ╚═════════════════════════════════════════════════════════════════════════════════════════╝

# "COMBO" maps key combos to functions(). The syntax is always:
#    KeyLabel   [modifier state]  >  function( params )
#    
# KEYLABEL : is usually what is printed on the key. A B C 1 2 3 , . ; ' / ESC
#     Other labels are NP1 (NumPad1), BSP (Backspace), RET (Return), INS (Insert), DEL (Delete)
#     All known labels are listed at the end of this file.
#     To find the key label for a key:
#        1. Press [ESC] + [D]  (debug output)
#        2. Press the key you want
#        3. In the Capsicain console, you see [LABELv....  e.g. "[BSPv =e ..." is key label "BSP" (Backspace) "v" (down)
#     If you need the whole truth, look at the source files scancodes.cpp and scancodes.h

# [modifier state] : hey, you did read the last section, right? (of course not. [...&] means "and LShift down", for example.)

# function ( params ) : can be
#
#     key ( keyLabel )  : sends one key.                              Example:  A [..&.] > key ( ESC )  means: LCtrl + A sends Escape
#
#     combo ( modifier + keyLabel) : sends simple combos              Example:  A [..&.] > combo ( LCTRL + ESC )  means: LCtrl + A  sends LCtrl + Escape
#
#     comboNtimes ( modifier + keyLabel , n) : combo() but n times.   Example:  A [..&.] > combo ( LCTRL + ESC , 5 )  means: LCtrl + A  sends LCtrl + Escape five times
#
#     moddedKey ( keyLabel + modifierString) : sends one key with any combination of modifiers.
#                                                                     Example:  A [..&&] > moddedKey ( ESC + ..&. ..&.) means: LCtrl+LShift+A  sends LCtrl+RCtrl+ESC
#                                                                     & means: IF this modifier is not already down, press it first, and at the end release it.
#                                                                     ^ means: IF this modifier is already down, release it first, and at the end press it again.
#
#     sequence ( key1_key2_key3_....)     : sends a sequence (macro). Example:  A [..T.] > sequence (H_E_L_L_O_&LSHF_W_^LSHF_O_R_L_D_Pause:5_&LSHF_1_^LSHF)
#                                                                     means: type "Hello World!". This sends "hello"+ShiftDown+"W"+ShiftUp+"orld", Pause 0.5 seconds, ShiftDown+"1"+ShiftUp
#                                                                     &key means key-down. 
#                                                                     ^key means key-up. You *must* release all keys that you press.
#                                                                     Special key "PAUSE:n"  waits n times 1/10th of a second. Max 255 = 25.5 seconds.
#                                                                     Note: you send KEYS (key labels), not characters. "?"  is  Shift+/  is "&LSHF_/^LSHF".

# Every time you press any (modifier + key) combo, the rules in this section are evaluated.
# The first match wins -> the order of the rules can matter.
# Pressing Ctrl+Shift+A matches both rules: 
# A [..&.] (equals Ctrl+A) and 
# A [..&&] (equals Ctrl+Shift+A).
# So either the more specific rule (A+Ctrl+Shift) must come first, 
# OR you explicitly change the first rule to A [..&^]   (A+Ctrl+NotShift)

# Tapped modifiers are similar.
# TapControl+Shift+A  will match both rules A [...&] (Shift+A)  and  A [..T&] (TappedCtrl + Shift + A).
# Therefore, you must put the rule (A [..T&]) *before* the rule (A [...&])
# There is no symbol for "not tapped".


# ├┼┼┼┼┼┼────LETS GO────>

[KINGCON_CAPS_TO_CURSOR_CONTROL]
# [CapsLock] summons Cursor control to the right hand
#       …  …  …  …  …     << >> ^  ^^ …  …  …  
# CAPS   …  …  …  …  …     BS <  v  >  DL …  
#         …  …  …  …        <! !> …  vv RSHF

    # Can be combined with the 8 regular modifiers. Other virtual modifiers must not be pressed.
COMBO  J   [^^^& .... ....] > key(LEFT)  #note that Caps + Shift + J will result in Shift + Left
COMBO  L   [^^^& .... ....] > key(RIGHT)
COMBO  I   [^^^& .... ....] > key(UP)
COMBO  K   [^^^& .... ....] > key(DOWN)
COMBO  N   [^^^& .... ....] > combo(LCTRL+LEFT)  #1 word left
COMBO  M   [^^^& .... ....] > combo(LCTRL+RIGHT) #1 word right

COMBO  H   [^^^& .... ....] > key(BSP)  # Backspace
COMBO  ;   [^^^& .... ....] > key(DEL)
COMBO  O   [^^^& .... ....] > key(PGUP)
COMBO  .   [^^^& .... ....] > key(PGDOWN)
COMBO  Y   [^^^& .... ....] > key(HOME)
COMBO  U   [^^^& .... ....] > key(END)

    #Caps (Mod9) + Alt (Mod12): BOLD cursor control. (the deleting keys are too dangerous here) 
COMBO  J   [&^^& .... ....] > comboNtimes(LEFT,8)
COMBO  L   [&^^& .... ....] > comboNtimes(RIGHT,8)
COMBO  I   [&^^& .... ....] > comboNtimes(UP,8)
COMBO  K   [&^^& .... ....] > comboNtimes(DOWN,8)
COMBO  N   [&^^& .... ....] > comboNtimes(LCTRL+LEFT,8)
COMBO  M   [&^^& .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO  O   [&^^& .... ....] > comboNtimes(PGUP,10)
COMBO  .   [&^^& .... ....] > comboNtimes(PGDOWN,10)
COMBO  Y   [&^^& .... ....] > combo(LCTRL+HOME) #because caps+ctrl+Y is hard to press
COMBO  U   [&^^& .... ....] > combo(LCTRL+END)  #dito

COMBO  H   [&^^& .... ....] > sequence(HOME_HOME_&LSHF_END_RIGHT_^LSHF_DEL)  #delete whole line

[KINGCON_CAPS_TO_CONTROL-X]
# [CapsLock] and left hand: 
#       All   Top  Find  Next
#  Caps  Undo  Cut  Copy  Paste Redo
#         New   Tab  Open  Save  X-tab

#Undo Cut Copy Paste Redo
COMBO  A   [^^^& ^^^^ ^^^^] > combo(LCTRL+Z)
COMBO  S   [^^^& ^^^^ ^^^^] > combo(LCTRL+X)
COMBO  D   [^^^& ^^^^ ^^^^] > combo(LCTRL+C)
COMBO  F   [^^^& ^^^^ ^^^^] > combo(LCTRL+V)
COMBO  G   [^^^& ^^^^ ^^^^] > combo(LCTRL+Y)
#cut copy paste whole line with Caps+Alt
COMBO  S   [&^^& ^^^^ ^^^^] > sequence(HOME_HOME_&LSHF_END_RIGHT_^LSHF_&LCTRL_X_^LCTRL)  #cut whole line
COMBO  D   [&^^& ^^^^ ^^^^] > sequence(HOME_HOME_&LSHF_END_RIGHT_^LSHF_&LCTRL_C_^LCTRL)  #copy whole line
COMBO  F   [&^^& ^^^^ ^^^^] > sequence(HOME_HOME_&LCTRL_V_^LCTRL)  #paste at line start
#all, top, find, find-next
COMBO  Q   [^^^& ^^^^ ^^^^] > combo(LCTRL+A)
COMBO  W   [^^^& ^^^^ ^^^^] > combo(LCTRL+HOME)
COMBO  E   [^^^& ^^^^ ^^^^] > combo(LCTRL+F)
COMBO  R   [^^^& ^^^. ^^^.] > combo(F3)      #find next F3, allow shift
#New, newTab, Open, Save, Close-Tab
COMBO  Z   [^^^& ^^^^ ^^^^] > combo(LCTRL+N)
COMBO  X   [^^^& ^^^^ ^^^^] > combo(LCTRL+T)
COMBO  C   [^^^& ^^^^ ^^^^] > combo(LCTRL+O)
COMBO  V   [^^^& ^^^^ ^^^^] > combo(LCTRL+S)
COMBO  B   [^^^& ^^^^ ^^^^] > combo(LCTRL+W)


[KINGCON_TAB_TO_NUMPAD]
# [TAB Layer]
# summons the Numpad under the right hand.
# QWERTS -> INSERT, PRINT, ScrollLock, PAUSE, NumLock, ScreenShot
#
# TAB   IN PR SL PA NL    -  7  8  9  .  *  /
#        …  SS …  …  …     BS 4  5  6  0  =
#         …  …  …  …  …     +  1  2  3  

COMBO  M   [^^&^ .^^^ ^^^^] > key(NP1)
COMBO  ,   [^^&^ .^^^ ^^^^] > key(NP2)
COMBO  .   [^^&^ .^^^ ^^^^] > key(NP3)
COMBO  J   [^^&^ .^^^ ^^^^] > key(NP4)
COMBO  K   [^^&^ .^^^ ^^^^] > key(NP5)
COMBO  L   [^^&^ .^^^ ^^^^] > key(NP6)
COMBO  U   [^^&^ .^^^ ^^^^] > key(NP7)
COMBO  I   [^^&^ .^^^ ^^^^] > key(NP8)
COMBO  O   [^^&^ .^^^ ^^^^] > key(NP9)
COMBO  ;   [^^&^ .^^^ ^^^^] > key(NP0)

COMBO  Y   [^^&^ ^^^^ ^^^^] > key(NP-)
COMBO  H   [^^&^ ^^^^ ^^^^] > key(BSP)
COMBO  N   [^^&^ ^^^^ ^^^^] > key(NP+)
COMBO  P   [^^&^ ^^^^ ^^^^] > key(NP.)
COMBO  [   [^^&^ ^^^^ ^^^^] > key(NP*)
COMBO  ]   [^^&^ ^^^^ ^^^^] > key(NP/)
COMBO  '   [^^&^ ^^^^ ^^^^] > key(=) #'
COMBO  RET     [^^&^ ^^^^ ^^^^] > key(NPRET)

#extended numpad
COMBO  Q   [^^&^ .... ....] > key(INS)
COMBO  W   [^^&^ .... ....] > key(SYSRQ)   #[Print]
COMBO  E   [^^&^ .... ....] > key(SCRLOCK) #[ScrollLock] what's the purpose of this key?
COMBO  R   [^^&^ .... ....] > key(PAUSE)   #[Pause]
COMBO  T   [^^&^ .... ....] > key(NUMLOCK)
COMBO  S   [^^&^ .... ....] > moddedKey(SYSRQ + .... .... &...) #screenshot of window


[KINGCON_CAPS+TAB_TO_FUNCTION] 
# Function keys on the NumPad (not that great, unless your keyboard has no dedicated F keys)

# TAB   …  …  …  …  …        F7 F8 F9 F11 F12 \
# CAPS   …  …  …  …  …        F4 F5 F6 F10 '  ENTER 
# LS||H   …  …  …  …  …        F1 F2 F3 /   RSHIFT   

COMBO  M   [^^&& .... ....] > key(F1)
COMBO  ,   [^^&& .... ....] > key(F2)
COMBO  .   [^^&& .... ....] > key(F3)
COMBO  J   [^^&& .... ....] > key(F4)
COMBO  K   [^^&& .... ....] > key(F5)
COMBO  L   [^^&& .... ....] > key(F6)
COMBO  U   [^^&& .... ....] > key(F7)
COMBO  I   [^^&& .... ....] > key(F8)
COMBO  O   [^^&& .... ....] > key(F9)
COMBO  ;   [^^&& .... ....] > key(F10)
COMBO  P   [^^&& .... ....] > key(F11)
COMBO  L\      [^^&& .... ....] > key(F12)
    
#For Function keys, restore the standard ALT key
COMBO  F1      [&^^^ .... ....] > moddedKey(F1 + &...)
COMBO  F2      [&^^^ .... ....] > moddedKey(F2 + &...)
COMBO  F3      [&^^^ .... ....] > moddedKey(F3 + &...)
COMBO  F4      [&^^^ .... ....] > moddedKey(F4 + &...)
COMBO  F5      [&^^^ .... ....] > moddedKey(F5 + &...)
COMBO  F6      [&^^^ .... ....] > moddedKey(F6 + &...)
COMBO  F7      [&^^^ .... ....] > moddedKey(F7 + &...)
COMBO  F8      [&^^^ .... ....] > moddedKey(F8 + &...)
COMBO  F9      [&^^^ .... ....] > moddedKey(F9 + &...)
COMBO  F10     [&^^^ .... ....] > moddedKey(F10 + &...)
COMBO  F11     [&^^^ .... ....] > moddedKey(F11 + &...)
COMBO  F12     [&^^^ .... ....] > moddedKey(F12 + &...)

#For NumPad Function keys, restore the standard ALT key
COMBO  M   [&^&& .... ....] > moddedKey(F1 + &...)
COMBO  ,   [&^&& .... ....] > moddedKey(F2 + &...)
COMBO  .   [&^&& .... ....] > moddedKey(F3 + &...)
COMBO  J   [&^&& .... ....] > moddedKey(F4 + &...)
COMBO  K   [&^&& .... ....] > moddedKey(F5 + &...)
COMBO  L   [&^&& .... ....] > moddedKey(F6 + &...)
COMBO  U   [&^&& .... ....] > moddedKey(F7 + &...)
COMBO  I   [&^&& .... ....] > moddedKey(F8 + &...)
COMBO  O   [&^&& .... ....] > moddedKey(F9 + &...)
COMBO  ;   [&^&& .... ....] > moddedKey(F10 + &...)
COMBO  P   [&^&& .... ....] > moddedKey(F11 + &...)
COMBO  [   [&^&& .... ....] > moddedKey(F12 + &...)


[KINGCON_ALT_TO_SPECIAL_CHARS]
# [MOD12 (ALT) Layer]  Special Characters
# TAB   !  @  #  $  %     ^  &  (  )  ?  ü  ß 
# CAPS   -  +  *  /  =     <- \  {  }  ö  ä 
# LS||H   `  ~  |  _  …     <  >  [  ] 

# Some duplicates, because a lot of programmer's key are on the right pinky,
# which stretches a lot and causes issues for me.

    #top row
    #the characters for US Shift+Numbers, but one row lower. Same fingers less stretch.
COMBO  Q   [&.^^ .... ....] > moddedKey(1 + .... ...&) #!
COMBO  W   [&.^^ .... ....] > moddedKey(2 + .... ...&) #@
COMBO  E   [&.^^ .... ....] > moddedKey(3 + .... ...&) ##
COMBO  R   [&.^^ .... ....] > moddedKey(4 + .... ...&) #$
COMBO  T   [&.^^ .... ....] > moddedKey(5 + .... ...&) #%

COMBO  Y   [&.^^ .... ....] > moddedKey(6 + .... ...&) #^
COMBO  U   [&.^^ .... ....] > moddedKey(7 + .... ...&) #+
COMBO  I   [&.^^ .... ....] > moddedKey(9 + .... ...&) #(
COMBO  O   [&.^^ .... ....] > moddedKey(0 + .... ...&) #)
COMBO  P   [&.^^ .... ....] > moddedKey(/ + .... ...&) #?
    #middle row
COMBO  A   [&.^^ .... ....] > key(-) #-
COMBO  S   [&.^^ .... ....] > moddedKey(= + .... ...&) #+
COMBO  D   [&.^^ .... ....] > moddedKey(8 + .... ...&) #*
COMBO  F   [&.^^ .... ....] > key(/) #/
COMBO  G   [&.^^ .... ....] > key(=) #=

COMBO  H   [&.^^ .... ....] > key(BSP) #back
COMBO  J   [&.^^ .... ....] > key(\) #\
COMBO  K   [&.^^ .... ....] > moddedKey([ + .... ...&) #{
COMBO  L   [&.^^ .... ....] > moddedKey(] + .... ...&) #}
    #bottom row
COMBO  Z   [&.^^ .... ....] > key(`) #GRAVE
COMBO  X   [&.^^ .... ....] > moddedKey(` + .... ...&) #~
COMBO  C   [&.^^ .... ....] > moddedKey(\ + .... ...&) #|
COMBO  V   [&.^^ .... ....] > moddedKey(- + .... ...&) #_
COMBO  B   [&.^^ .... ....] > altChar(0133) # …

COMBO  N   [&.^^ .... ....] > moddedKey(, + .... ...&) #<
COMBO  M   [&.^^ .... ....] > moddedKey(. + .... ...&) #>
COMBO  ,   [&.^^ .... ....] > key([) #[
COMBO  .   [&.^^ .... ....] > key(]) #]

[KINGCON_ALT_TO_GERMAN_CHARS]
#German chars:  ö ä ü ß  Ö Ä Ü 

COMBO  '   [&... .... ...^] > altChar(132) #ä
COMBO  '   [&... .... ...&] > altChar(142) #Ä
COMBO  ;   [&... .... ...^] > altChar(148) #ö
COMBO  ;   [&... .... ...&] > altChar(153) #Ö
COMBO  [   [&... .... ...^] > altChar(129) #ü
COMBO  [   [&... .... ...&] > altChar(154) #Ü
COMBO  ]   [&... .... ....] > altChar(225) #ß
    

[KINGCON_ALT_TAPPED+CAPS_TAPPED_TO_EXTRA_CHARS]
#Super Duper Extra Special chars with Tapped Alt + Tapped Caps (no shift)
# TAB   …  ε  …  …  …     …  …  …  …  …  …  …  
# CAPS   …  …  …  …  …     …  …  …  …  …  …  
#         …  …  …  …  …     …  …  …  …  …  

COMBO  E   [T..T .... ...^] > altChar(238) # ε lower case Epsilon



[KINGCON_ALT_TAPPED+CAPS_TAPPED+SHIFT_TO_SUPEREXTRA_CHARS]
#Super Duper Extra Hyper Special chars with Tapped Alt + Tapped Caps + Shift (just showing off here ;)
#These must be defined before the "Tapped Alt without Tapped Shift" combos

# TAB   …  Σ  …  …  …     …  …  …  …  …  …  … 
# CAPS   …  …  …  …  …     …  …  …  …  …  …   
# LSHIFT  …  …  …  …  …     …  …  …  …  …   

COMBO  E   [T..T .... ...&] > altChar(228) # Σ upper case Epsilon

        
[KINGCON_ALT_TAPPED_TO_VERY_SPECIAL_CHARS]
#Very Special chars with Tapped Alt

# ESC  ¹  ²  ³                       º
# TAB   …  €  …  …  …     …  …  …  …  …  …  …  ENTR
# CAPS   …  …  °  …  ♀     …  …  …  …  …  …  E||NTR 
# LSHIFT   …  …  ©  …  …     ♂  …  …  …  …  SHIFT    
COMBO  0   [T... .... ....] > altChar(0186) #power 0
COMBO  1   [T... .... ....] > altChar(0185) #power 1
COMBO  2   [T... .... ....] > altChar(0178) #power 2
COMBO  3   [T... .... ....] > altChar(0179) #power 3
COMBO  E   [T... .... ....] > altChar(0128) #Euro
COMBO  C   [T... .... ....] > altChar(0169) #Copyright
COMBO  D   [T... .... ....] > altChar(248) #Degree
COMBO  M   [T... .... ....] > altChar(11) #Male
COMBO  F   [T... .... ....] > altChar(12) #Female


[KINGCON_NUMPAD+CONTROL_TO_TABLE1]
# NumPad + Control = more special chars on the NumPad and the virtual NumPad
#┌──────────────────────────┬────┐
#│ rectangles with Tab+Ctrl │    │
#├──────────────────────────┼────┘
#│ aint't it quaint?        │    
#└──────────────────────────┘
    #PHYSICAL NUMPAD
    # .├┤┬
    # ┌─┐┴
    # │┼│
    # └─┘.
    # SP R

COMBO  NP-     [.... .... ..&^] > altChar(194)
COMBO  NP7     [.... .... ..&^] > altChar(218)
COMBO  NP8     [.... .... ..&^] > altChar(196)
COMBO  NP9     [.... .... ..&^] > altChar(191)
COMBO  NP/     [.... .... ..&^] > altChar(195)
COMBO  NP4     [.... .... ..&^] > altChar(179)
COMBO  NP5     [.... .... ..&^] > altChar(197)
COMBO  NP6     [.... .... ..&^] > altChar(179)
COMBO  NP*     [.... .... ..&^] > altChar(180)
COMBO  NP+     [.... .... ..&^] > altChar(193)
COMBO  NP1     [.... .... ..&^] > altChar(192)
COMBO  NP2     [.... .... ..&^] > altChar(196)
COMBO  NP3     [.... .... ..&^] > altChar(217)
COMBO  NP0     [.... .... ..&^] > moddedKey(SPACE + ..^.)

    #VIRTUAL NUMPAD
    #   ┬┌─┐
    #   ├│┼│┤
    #   ┴└─┘
COMBO  Y   [^.&^ .... ..&^] > altChar(194)
COMBO  U   [^.&^ .... ..&^] > altChar(218)
COMBO  I   [^.&^ .... ..&^] > altChar(196)
COMBO  O   [^.&^ .... ..&^] > altChar(191)
COMBO  H   [^.&^ .... ..&^] > altChar(195)
COMBO  J   [^.&^ .... ..&^] > altChar(179)
COMBO  K   [^.&^ .... ..&^] > altChar(197)
COMBO  L   [^.&^ .... ..&^] > altChar(179)
COMBO  ;   [^.&^ .... ..&^] > altChar(180)
COMBO  N   [^.&^ .... ..&^] > altChar(193)
COMBO  M   [^.&^ .... ..&^] > altChar(192)
COMBO  ,   [^.&^ .... ..&^] > altChar(196)
COMBO  .   [^.&^ .... ..&^] > altChar(217)


[KINGCON_NUMPAD+CONTROL+SHIFT_TO_TABLE2]
# TAB + Control + Shift = even more special chars on the (virtual) NumPad
# ╔═══════════════════╦═══╗
# ║ same, with LShift ║   ║
# ╠═══════════════════╬═══╝
# ╚═══════════════════╝
#
    #PHYSICAL NUMPAD
    # .╠╣╦
    # ╔═╗╩┴
    # ║╬║
    # ╚═╝.
    # . .
COMBO  NP-     [.... .... ..&&] > altChar(203)
COMBO  NP7     [.... .... ..&&] > altChar(201)
COMBO  NP8     [.... .... ..&&] > altChar(205)
COMBO  NP9     [.... .... ..&&] > altChar(187)
COMBO  NP/     [.... .... ..&&] > altChar(204)
COMBO  NP4     [.... .... ..&&] > altChar(186)
COMBO  NP5     [.... .... ..&&] > altChar(206)
COMBO  NP6     [.... .... ..&&] > altChar(186)
COMBO  NP*     [.... .... ..&&] > altChar(185)
COMBO  NP+     [.... .... ..&&] > altChar(202)
COMBO  NP1     [.... .... ..&&] > altChar(200)
COMBO  NP2     [.... .... ..&&] > altChar(205)
COMBO  NP3     [.... .... ..&&] > altChar(188)
COMBO  NP0     [.... .... ..&&] > moddedKey(SPACE + ..^^)

    #VIRTUAL NUMPAD
    #   ╦╔═╗
    #   ╠║╬║╣
    #   ╩╚═╝
COMBO  Y   [^.&^ .... ..&&] > altChar(203)
COMBO  U   [^.&^ .... ..&&] > altChar(201)
COMBO  I   [^.&^ .... ..&&] > altChar(205)
COMBO  O   [^.&^ .... ..&&] > altChar(187)
COMBO  H   [^.&^ .... ..&&] > altChar(204)
COMBO  J   [^.&^ .... ..&&] > altChar(186)
COMBO  K   [^.&^ .... ..&&] > altChar(206)
COMBO  L   [^.&^ .... ..&&] > altChar(186)
COMBO  ;   [^.&^ .... ..&&] > altChar(185)
COMBO  N   [^.&^ .... ..&&] > altChar(202)
COMBO  M   [^.&^ .... ..&&] > altChar(200)
COMBO  ,   [^.&^ .... ..&&] > altChar(205)
COMBO  .   [^.&^ .... ..&&] > altChar(188)
    

[CAPS+NUMBERS_TO_AHK_CLIPBOARDS]
# Caps + Numbers = AutoHotKey magic combos -> 10 clipboards
# Requires a corresponding AHK script.
COMBO  1   [...& .... ....] > combo(F14+1)
COMBO  2   [...& .... ....] > combo(F14+2)
COMBO  3   [...& .... ....] > combo(F14+3)
COMBO  4   [...& .... ....] > combo(F14+4)
COMBO  5   [...& .... ....] > combo(F14+5)
COMBO  6   [...& .... ....] > combo(F14+6)
COMBO  7   [...& .... ....] > combo(F14+7)
COMBO  8   [...& .... ....] > combo(F14+8)
COMBO  9   [...& .... ....] > combo(F14+9)
COMBO  0   [...& .... ....] > combo(F14+0)
    
COMBO  1   [...T .... ....] > combo(F15+1)
COMBO  2   [...T .... ....] > combo(F15+2)
COMBO  3   [...T .... ....] > combo(F15+3)
COMBO  4   [...T .... ....] > combo(F15+4)
COMBO  5   [...T .... ....] > combo(F15+5)
COMBO  6   [...T .... ....] > combo(F15+6)
COMBO  7   [...T .... ....] > combo(F15+7)
COMBO  8   [...T .... ....] > combo(F15+8)
COMBO  9   [...T .... ....] > combo(F15+9)
COMBO  0   [...T .... ....] > combo(F15+0)

[CTRL_TAPPED+ALT_TAPPED_TO_MACRO]
COMBO  J   [T... .... ..T.] > sequence(e_j_o_r_h_i_n)
#Show off the sequence (macro) feature
COMBO  H   [T... .... ..T.] > sequence (&LSHF_H_^LSHF_e_l_l_o_SPACE_PAUSE:5_W_O_R_L_D_PAUSE:10_&LCtrl_LEFT_^LCtrl_&LSHF_RIGHT_^LSHF_PAUSE:7_DEL_PAUSE:5_&LSHF_W_^LSHF_END_PAUSE:5_,_PAUSE:10_SPACE_h_o_w_SPACE_PAUSE:3_a_r_e_PAUSE:3_SPACE_Y_O_U_&LSHF_/_^LSHF)


# ╔════════════════════════════════════════════════════════════════════════════╗
# ║     ALPHA MAPPING LAYERS BELOW                                             ║
# ║ These layers contain simple "keyA to keyB" mappings.                       ║
# ║ Use them to configure DVORAK, COLMAK, or whatever custom layout you like.  ║
# ║ Switch alpha layers with [ESC]+[0..9]                                      ║
# ╚════════════════════════════════════════════════════════════════════════════╝


# Syntax:
#    ALPHA_FROM  I N P U T
#    ALPHA_TO    O U T P U
#    ALPHA_END
# This will map I->O, N->U, P->T, U->P, T->U
# ALPHA_FROM and ALPHA_TO *must* contain the same number of keys.
#
# You can format these 'maps' anyway you like, just have at least one blank between each key.
# This is the same map:
# ALPHA_FROM  I      N
#             P      U
# ALPHA_TO    O
#          U T P U
# ALPHA_END

 
[LAYOUT_QWERTZ]
ALPHA_FROM  Y  Z
ALPHA_TO    Z  Y
ALPHA_END

[LAYOUT_QWERTZJ]
# the Z<>Y flip on US<>German keyboards f*ks with my muscle memory, and I cannot reconfigure my typewriters to QWERTY. So, QWERTZ it is for me...
# Backslash key on ANSI is Return on ISO, and the other way around. This sucks when you switch boards -> map Backslash to Return and all boards are consistent.
ALPHA_FROM  Y  Z  \
ALPHA_TO    Z  Y  RET
ALPHA_END


[LAYOUT_WORKMAN]
#Original Workman layout
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
     z  x  c  v  b     n  m
ALPHA_TO
   q  d  r  w  b     j  f  u  p  ;   
    a  s  h  t  g     y  n  e  o  i
     z  x  m  c  v     k  l
ALPHA_END


[LAYOUT_WORKMANJ]
#Workman but with Shift, Enter and Z in the 'right' place
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '  \
     z  x  c  v  b     n  m  ,  .
ALPHA_TO
   q  d  r  w  b     z  f  u  p  ;  [  ]
    a  s  h  t  g     j  n  e  o  i  '  RET     # note the ' char triggers my editor
     y  x  m  c  v     k  l  ,  .
ALPHA_END



[LAYOUT_COLEMAK]
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
     z  x  c  v  b     n  m
ALPHA_TO
   q  w  f  p  g     j  l  u  y  ;
    a  r  s  t  d     h  n  e  i  o
     z  x  c  v  b     k  m
ALPHA_END


[LAYOUT_COLEMAK_MOD]
# Colemak_Angle-Mod-DH
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
  L\ z  x  c  v  b     n  m             # L\ = 'left backslash', only on ISO boards
ALPHA_TO
   q  w  f  p  b     j  l  u  y  ;
    a  r  s  t  g     k  n  e  i  o
  z  x  c  d  v  L\    m  h
ALPHA_END


[LAYOUT_DVORAK]
# DVORAK_Simplified_US
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '
     z  x  c  v  b     n  m  ,  .  /
ALPHA_TO
   '  ,  .  p  y     f  g  c  r  l  /  =     # closing the apos ' pair to help my editor
    a  o  e  u  i     d  h  t  n  s  -
     ;  q  j  k  x     b  m  w  v  z
ALPHA_END



[REFERENCE: Mapping of Scancodes to Key Labels]
# Taken from scancodes.cpp
# To find the Label for a scancode, switch to debug mode with [ESC]+[D], press the key, and look at the first item of the debug line.
SC_NOP, "NOP"	| SC_ESCAPE, "ESC"	| SC_1, "1"	| SC_2, "2"	| SC_3, "3"	| SC_4, "4"	| SC_5, "5"	| SC_6, "6"	| SC_7, "7"	| SC_8, "8"	| SC_9, "9"	| SC_0, "0"	| SC_MINUS, "-"	| SC_EQUALS, "="	| SC_BACK, "BSP"	| 
SC_TAB, "TAB"	| SC_Q, "Q"	| SC_W, "W"	| SC_E, "E"	| SC_R, "R"	| SC_T, "T"	| SC_Y, "Y"	| SC_U, "U"	| SC_I, "I"	| SC_O, "O"	| SC_P, "P"	| SC_LBRACK, "["	| SC_RBRACK, "]"	| SC_RETURN, "RET"	| 
SC_LCTRL, "LCTRL"	| SC_A, "A"	| SC_S, "S"	| SC_D, "D"	| SC_F, "F"	| SC_G, "G"	| SC_H, "H"	| SC_J, "J"	| SC_K, "K"	| SC_L, "L"	| SC_SEMI, ";"	| SC_APOS, "'"	| 
SC_GRAVE, "`"	| SC_LSHIFT, "LSHF"	| SC_BSLASH, "\\"	| SC_Z, "Z"	| SC_X, "X"	| SC_C, "C"	| SC_V, "V"	| SC_B, "B"	| SC_N, "N"	| SC_M, "M"	| SC_COMMA, ","	| SC_DOT, "."	| SC_SLASH, "/"	| SC_RSHIFT, "RSHF"	| 
SC_NPMULT, "NP*"	| SC_LALT, "LALT"	| SC_SPACE, "SPACE"	| SC_CAPS, "CAPS"	| 
SC_F1, "F1"	| SC_F2, "F2"	| SC_F3, "F3"	| SC_F4, "F4"	| SC_F5, "F5"	| SC_F6, "F6"	| SC_F7, "F7"	| SC_F8, "F8"	| SC_F9, "F9"	| SC_F10, "F10"	| SC_NUMLOCK, "NUMLOCK"	| SC_SCRLOCK, "SCRLOCK"	| 
SC_NP7, "NP7"	| SC_NP8, "NP8"	| SC_NP9, "NP9"	| SC_NPSUB, "NP-"	| SC_NP4, "NP4"	| SC_NP5, "NP5"	| SC_NP6, "NP6"	| SC_NPADD, "NP+"	| SC_NP1, "NP1"	| SC_NP2, "NP2"	| SC_NP3, "NP3"	| SC_NP0, "NP0"	| SC_NPDOT, "NP."	| 
SC_LBSLASH, "L\\"	| SC_F11, "F11"	| SC_F12, "F12"	| SC_NPEQUALS1, "NP="	| SC_F13, "F13"	| SC_F14, "F14"	| SC_F15, "F15"	| 
CAPSICAIN virtual modifiers:	| SC_MOD9, "MOD9" 	|  SC_MOD10, "MOD10"	| SC_MOD11, "MOD11"	|  SC_MOD12, "MOD12"	| SC_MOD13, "MOD13"	| SC_MOD14, "MOD14"	| SC_MOD15, "MOD15"	| 
SC_KANA, "KANA"	| SC_ABNT_C1, "ABNT_C1"	| SC_CONVERT, "CONVERT"	| SC_NOCONVERT, "NOCONVERT"	| SC_YEN, "YEN"	| SC_ABNT_C2, "ABNT_C2"	| SC_NPEQUALS2, "NPEQUALS2"	| SC_PREVTRACK, "PREVTRACK"	| 
SC_AT, "AT"	| SC_COLON, "COLON"	| SC_UNDERLINE, "UNDERLINE"	| SC_KANJI, "KANJI"	| SC_STOP, "STOP"	| SC_AX, "AX"	| SC_UNLABELED, "UNLABELED"	| SC_NEXTTRACK, "NEXTTRACK"	| 
SC_NPRET, "NPRET"	| SC_RCTRL, "RCTRL"	| SC_MUTE, "MUTE"	| SC_CALCULATOR, "CALCULATOR"	| SC_PLAYPAUSE, "PLAYPAUSE"	| SC_MEDIASTOP, "MEDIASTOP"	| SC_TWOSUPERIOR, "TWOSUPERIOR"	| 
SC_VOLUMEDOWN, "VOLUMEDOWN"	| SC_VOLUMEUP, "VOLUMEUP"	| SC_WEBHOME, "WEBHOME"	| 
SC_NUMPADCOMMA, "NP,"	| SC_DIVIDE, "NP/"	| SC_SYSRQ, "SYSRQ"	| SC_RALT, "RALT"	| SC_PAUSE, "PAUSE"	| SC_HOME, "HOME"	| SC_UP, "UP"	| SC_PGUP, "PGUP"	| 
SC_LEFT, "LEFT"	| SC_RIGHT, "RIGHT"	| SC_END, "END"	| SC_DOWN, "DOWN"	| SC_PGDOWN, "PGDOWN"	| SC_INSERT, "INS"	| SC_DELETE, "DEL"	| SC_LWIN, "LWIN"	| SC_RWIN, "RWIN"	| SC_APPS, "APPS"	| 
SC_POWER, "POWER"	| SC_SLEEP, "SLEEP"	| SC_WAKE, "WAKE"	| SC_WEBSEARCH, "WEBSEARCH"	| SC_WEBFAVORITES, "WEBFAVORITES"	| SC_WEBREFRESH, "WEBREFRESH"	| SC_WEBSTOP, "WEBSTOP"	| 
SC_WEBFORWARD, "WEBFORWARD"	| SC_WEBBACK, "WEBBACK"	| SC_MYCOMPUTER, "MYCOMPUTER"	| SC_MAIL, "MAIL"	| SC_MEDIASELECT, "MEDIASELECT"
