
# Capsicain config file

# This is the config that I use myself.
# Requires that the Windows keyboard layout is set to standard US-English

#v35: new map for alt chars, new tappedAlt chars
#v36: KEY_MODIFIER_IFTAPPED_MAPPING
#v37: add LControlBlocksAlphaMapping, ProcessOnlyFirstKeyboard
#v38: add Workman Std, Colemak, Dvorak. Now with layerName
#v38b: rename to LControlLWinBlocksAlphaMapping
#v38c: add special chars ╔═╗║║╚╝╠╣╩╦ ┌─┐││└┘├┤┴┬ º¹²³
#v39: comment char is now #
#V40: changed key labels from 'DOT' to '.' and all similar cases. '[' was a pain...
#v41: introduced ALPHA_FROM-ALPHA_TO-ALPHA_END.
#v42: cleanup
#v43: changed some NumPad key labels, put ┌─┐╚═╝ on NumPad
#v44: enabled layer-specific sections (undone with v45...)
#v45: modular; tagged lines with INCLUDE, GLOBAL/OPTION/MODIFIER/COMBO/ALPHA_FROM-ALPHA_TO-ALPHA_END

# TODO: 
#     öäü do not react to CapsLock ON
#     configurable mods for each Layer

GLOBAL IniVersion 45
                #any string, so you can check with [ESC]+[S] if you're running the right config

GLOBAL ActiveLayerOnStartup 1
                #This layer is active on startup
                #Switch with [ESC]+[0..9]  
                #0=hardcoded = no changes at all
                #1=QwertzJ  with cajhin's config
                #2=WorkmanJ with cajhin's config
                #3=Workman std
                #4=Colemak std
                #5=Colemak Angle-Mod-DH
                #6=Dvorak simplified US
                #9=Test config

#GLOBAL DebugOnStartup

# NOTE: you can put all your settings directly into one layer.
#       To reuse and reconfigure functionality more easily, you can put groups of settings into [YOUR_NEW_SECTION],
#       and INCLUDE that section in your layer.

[LAYER_1]
OPTION layerName QwertzJ-cajhin
INCLUDE ALL_SECTIONS_BUT_LAYOUT_CAJHIN
INCLUDE LAYOUT_QWERTZ

[LAYER_2]
OPTION LayerName WorkmanJ-cajhin
INCLUDE ALL_SECTIONS_BUT_LAYOUT_CAJHIN
INCLUDE LAYOUT_WORKMANJ

[LAYER_3]
OPTION LayerName Workman_std
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_WORKMAN

[LAYER_4]
OPTION LayerName Colemak_std
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_COLEMAK

[LAYER_5]
OPTION LayerName Colemak_MOD
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_COLEMAK_MOD

[LAYER_6]
OPTION LayerName Dvorak_std
OPTION LControlLWinBlocksAlphaMapping
INCLUDE LAYOUT_DVORAK

[LAYER_9]
OPTION debug
#OPTION LayerName Test
INCLUDE LAYOUT_QWERTZJ
ALPHA_FROM Y
ALPHA_TO   X
ALPHA_END
COMBO    M       [v!!v .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO    M       [v!!v .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO    N       [v!!v .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO    N       [v!!v .... ....] > comboNtimes(LCTRL+RIGHT,10)
COMBO    O       [v!!v .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO    O       [v!!v .... ....] > comboNtimes(LCTRL+UP,8)
MODIFIER caps ralt nop
MODIFIER caps ralt nop
MODIFIER caps ralt caps
MODIFIER caps lalt nop


#Collect the many sections for the 'cajhin' config into one 'super-module'
[ALL_SECTIONS_BUT_LAYOUT_CAJHIN]
INCLUDE OPTIONS_CAJHIN
INCLUDE MODIFIERS_CAJHIN
INCLUDE CAPS_TO_CURSOR_CONTROL
INCLUDE TAB_TO_NUMPAD
INCLUDE CAPS+TAB_TO_FUNCTION
INCLUDE ALT_TO_SPECIAL_CHARS
INCLUDE ALT_TO_GERMAN_CHARS
INCLUDE ALT_TAPPED+CAPS_TAPPED_TO_EXTRA_CHARS
INCLUDE ALT_TAPPED+CAPS_TAPPED+SHIFT_TO_SUPEREXTRA_CHARS
INCLUDE ALT_TAPPED_TO_VERY_SPECIAL_CHARS
INCLUDE NUMPAD+CONTROL_TO_TABLE1
INCLUDE NUMPAD+CONTROL+SHIFT_TO_TABLE2
INCLUDE CAPS+NUMBERS_TO_AHK_CLIPBOARDS


# ╔════════════════════════════════════════════════════════════════════════╗
# ║     ENABLE / DISABLE FEATURES                                          ║
# ║  You can comment out features you don't like.                          ║
# ╚════════════════════════════════════════════════════════════════════════╝
[OPTIONS_CAJHIN]

#OPTION Debug          
                #verbose logging. Switch with [ESC]+[D]

OPTION DelayForKeySequenceMS 0 
                #System may drop keys when they are sent too fast. 
                #1 is the lower limit for reliable operation on some machines.
                #5 is the lower limit when I'm inside a Linux VM
                #Decrease/Increase with [,] and [.] keys
                #NOTE: for RDP sessions, you want to set 'Options: Local Resources > Apply Windows Key combinations: On this machine'.
                #      Otherwise you need 10+ ms delay for reliable key sequences, depending on the network.
                #NOTE: the Windows Sleep function is not precise; '1ms' may actually sleep 1 or 20ms depending on thread scheduling.

#OPTION ProcessOnlyFirstKeyboard
                #if there is more than one keyboard (e.g. laptop with USB keyboard attached), 
                #Capsicain will lock to the board that sends the first key stroke. 
                #Useful to have a "debugging" board with standard behavior, or a guest board at your workplace.

OPTION StartAHK        
                #on startup, start autohotkey.exe if it is not running. Must be in the same directory as capsicain.exe.

OPTION ShiftShiftToShiftLock   
                #[LSHIFT] + [RSHIFT] = ShiftLock ON. [RSHIFT] + [LSHIFT] = ShiftLock OFF.
                #this makes the CapsLock key available for beautiful combos.
                #I like: OFF means OFF, no matter what the current CapsLock state is.

OPTION AltAltToAlt     
                #maps the combo [LALT]+[RALT] to [ALT] so you can use the very nicely positioned Alt keys for other things.
                #this feature requires that both Alt keys are mapped to MOD12 below.
                #sorry, this makes ALT+TAB uncomfortable

#OPTION FlipYZ         
                #flip Y and Z keys (US QWERTY to GER QWERTZ)
                #This is already defined in my Qwertz alpha mapping below.
                #The feature allows you to switch anytime without changing the config.
                #Switch with [ESC]+[Z]

OPTION FlipAltWinOnAppleKeyboards 
                #[ALT] <-> [WIN] on both sides because Apple keyboard on Windows is irritating.
                #This feature has no effect on PC keyboards.
                #Switch with [ESC]+[W]

OPTION LControlLWinBlocksAlphaMapping
                #Character keys are never remapped when [LControl] or [LWin] is down.
                #I don't want Ctrl+C to move with a Dvorak layout.



# ╔════════════════════════════════════════════════════════════════════════╗
# ║     DEFINE THE MODIFIER KEYS                                           ║
# ║  MAP Key A to modifier X, or to Key B when tapped                      ║
# ║                                                                        ║
# ║  Key B can only be a normal key, no modifier.                          ║
# ║  Key "NOP" means 'no action'. ("No OPeration" key with scancode 0)     ║
# ║                                                                        ║
# ║  Modifiers that are not defined here work as usual.                    ║
# ║  Modifier labels: LSHF  LCTRL  LWIN  LALT                              ║
# ║                   RSHF  RCTRL  RWIN  RALT                              ║
# ║                   MOD9  MOD10  MOD11 MOD12                             ║
# ║                   MOD13 MOD14  MOD15                                   ║
# ╚════════════════════════════════════════════════════════════════════════╝
[MODIFIERS_CAJHIN]
#          Key     To Modifer  To Key If Tapped
MODIFIER     L\      LSHF        NOP     # L\ is the label for 'Left Backslash key'; it exists only on ISO boards.
MODIFIER     /       RSHF        NOP

# NOTE: each module already defines the modifiers it needs; this is probably redundant.
OPTION  ShiftShiftToShiftLock
MODIFIER     CAPS    MOD9        NOP
MODIFIER     TAB     MOD10       TAB

OPTION  AltAltToAlt
MODIFIER     LALT    MOD12       NOP
MODIFIER     RALT    MOD12       NOP


[MODIFIERS_TEST]
# caps to Ctrl or Esc if tapped
MODIFIER     CAPS    LCTRL       ESC
# use F J as shift ke
MODIFIER     F       LSHF       F
MODIFIER     J       RSHF       J


# ╔════════════════════════════════════════════════════════════════════════╗
# ║     MUST KNOW: MODIFIER STATUS STRINGS                                 ║
# ║  This reference section is not read (it is hardcoded).                 ║
# ║  You must understand this to define key combos.                        ║
# ╚════════════════════════════════════════════════════════════════════════╝
[REFERENCE: MODIFIER STATUS STRINGS]
NOTE: All [Reference*  sections are filtered out.
The info below is hardcoded into Capsicain.

MODIFIER POSITION:
All modifier keys are assigned to a position in the [modifier string].

    LSHIFT  [.... ...1]
    LCTRL   [.... ..2.]
    LWIN    [.... .3..]
    LALT    [.... 4...]

    RSHIFT  [...5 ....]
    RCTRL   [..6. ....]
    RWIN    [.7.. ....]
    RALT    [8... ....]
    
NOTE: By default, the eight regular modifiers are forwarded to Windows. The 'custom' modifier keys MOD9..MOD15 are tracked but never sent out.
NOTE: [x0] is the same as [00x0] and [0000 0000 0000 00x0] (just like the number 42 = 0042 = 000000042. You can add and remove leading 0)

    MOD9    [...9 .... ....]
    MOD10   [..A. .... ....]
    MOD11   [.B.. .... ....]
    MOD12   [C... .... ....]

I do not use MOD13,14,15 (yet). 15 modifiers is a bit overkill...
    MOD13   [...D .... .... ....]
    MOD14   [..E. .... .... ....]
    MOD15   [.F.. .... .... ....]
#   MOD16   not possible, there are 'only' 15 modifiers. We could extend to 31 by changing a few data types, but why?


MODIFIER STATE SYMBOLS:
Symbols for modifier state, replacing the 1 2 3 .. F in the diagrams above: 
        v   the modifier is down
        !   the modifier is NOT down
        T   the modifier was tapped. You can combine as many tapped and pressed modifiers as you want.
        .   ignore, forward to Windows

EXAMPLES:
 A [...v]       is  key combo [LeftShift] + key [A].  All other modifiers may or may not be pressed.
 A [..v.]       is  LeftControl + A
 A [.v..]       is  LeftWin + A
 A [v...]       is  LeftAlt + A
 A [...v ....]  is  RShift + A

 A [v..v]       is  LShift + LAlt + A
 A [!..v]       is  LShift and NOT-LAlt + A
 B [...v ...v]  is  RightShift + LeftShift + B

 C [...T]       is  Tapped-LShift + C
 D [.vTT]       is  Tapped-LShift, Tapped-LControl, Win + D

 A [.... .... ...v] is  same as A [...v]
 E [...v .... ....] is  MOD9 key + E.  I map [CapsLock] to MOD9 in the 'cajhin' config.

 F [vvvv vvvv]  is  every standard modifier in da house + F

NOTE an issue called 'shadowing': many keyboards have limits about how many (and which) keys you can press at the same time.
    For example, on my Apple keyboard, the [ESC]+[CapsLock] combo shadows (blocks) all keys on the home row (asdfg hjkl).

NOTE we are dealing with physical keys here, NOT with characters. 
   "key A" means "the electrical switch on the left side that sends scancode #30 - on a standard US IBM keyboard it has a plastic keycap with an A printed on it".
   In other words, the labels on your keyboard do not matter. Deep down the driver stack, the labels on the IBM Model M (US) keyboard are the only truth.
   If the key in the lower left corner is labeled "Y" on your Euro keyboard, this is *still* scancode #44 = "SC_Z" = keyLabel 'Z'. 
   The usual mapping to Y (or whatever character) happens later, with the Windows keyboard layout.



# ╔═════════════════════════════════════════════════════════════════════════════════════════╗
# ║     MODIFIER+KEY COMBOS BELOW                                                           ║
# ║ Keyword "COMBO" defines all mappings that are not plain "keyA to keyB" mappings.        ║
# ║ These mappings are not changed by your alpha layout ("QWERTZ layout", "DVORAK layout")  ║
# ║ These mappings may depend on your Windows keyboard layout; for example,                 ║
# ║       sending "Shift+2" will produce [@] on US layout but ["] on GER layout.            ║
# ╚═════════════════════════════════════════════════════════════════════════════════════════╝

# "COMBO" maps key combos to functions(). The syntax is always:
#    KeyLabel   [modifier string]  >  function( params )
#    
# KeyLabel : is usually what is printed on the key. A B C 1 2 3 , . ; ' / ESC
#     Others include NP1 (NumPad1), BSP (Backspace), RET (Return), INS (Insert), DEL (Delete)
#     To find the key label for a key:
#        1. Press [ESC] + [D]  (debug output)
#        2. Press the key you want
#        3. You see the [LABELv....  e.g. "[BSPv =e ..." is "BSP" (Backspace) scancode (hex)E
#     If you need keys that are not on your keyboard, look at the source files scancodes.cpp and scancodes.h

# [modifier string] : hey, you did read the last section, right? (of course not ;)

# function ( params ) : can be
#     key ( keyLabel )  : sends one key.                              Example:  A [..v.] key ( ESC )  -> LCtrl + A sends Escape
#     combo ( modifier + keyLabel) : sends simple combos              Example:  A [..v.] combo ( LCTRL + ESC )  -> LCtrl + A  sends LCtrl + Escape
#     comboNtimes ( modifier + keyLabel , n) : combo() but n times.   Example:  A [..v.] combo ( LCTRL + ESC , 5 )  -> LCtrl + A  sends LCtrl + Escape five times
#     moddedKey ( keyLabel & modifierString) : sends one key with any combination of modifiers.
#                                                                     Example:  A [..vv] moddedKey ( ESC & ..v. ..v.) -> LCtrl+LShift+A  sends LCtrl+RCtrl+ESC

# Every time you press (modifier + key), the rules in this section are evaluated.
# The first match wins -> the order of the rules can matter.
# Pressing Ctrl+Shift+A matches both rules: 
# A [..v.] (equals Ctrl+A) and 
# A [..vv] (equals Ctrl+Shift+A).
# So either the more specific rule (A+Ctrl+Shift) must come first, 
# OR you explicitly make the first rule A [..v!]   (A+Ctrl+NotShift)

# Tapped modifiers are similar.
# TapControl+Shift+A  will match the rule A [...v] (Shift+A).
# Therefore, you must put the rule (A [..Tv]) *before* the rule (A [...v])
# There is no symbol for "not tapped".


# ├┼┼┼┼┼┼────LETS GO────>

# [CapsLock] summons Cursor control to the right hand
# TAB   …  …  …  …  …     << >> ^  ^^ …  …  …  ENTR
# CAPS   UN CT CP PS RE    <- <  v  >  DL …  E||NTR
# LS||H   …  …  …  …        <! !> …  vv R||SHIFT    
 
[CAPS_TO_CURSOR_CONTROL]
OPTION  ShiftShiftToShiftLock   
MODIFIER  CAPS  MOD9  NOP

    # Can be combined with the 8 regular modifiers. 'special' mods must not be pressed.
COMBO    J       [!!!v .... ....] > key(LEFT)  #note that Caps + Shift + J will result in Shift + Left
COMBO    L       [!!!v .... ....] > key(RIGHT)
COMBO    I       [!!!v .... ....] > key(UP)
COMBO    K       [!!!v .... ....] > key(DOWN)
COMBO    N       [!!!v .... ....] > combo(LCTRL+LEFT)  #1 word left
COMBO    M       [!!!v .... ....] > combo(LCTRL+RIGHT) #1 word right

COMBO    H       [!!!v .... ....] > key(BSP)  # Backspace
COMBO    ;       [!!!v .... ....] > key(DEL)
COMBO    O       [!!!v .... ....] > key(PGUP)
COMBO    .       [!!!v .... ....] > key(PGDOWN)
COMBO    Y       [!!!v .... ....] > key(HOME)
COMBO    U       [!!!v .... ....] > key(END)

    #Caps + Alt (Mod12): BOLD cursor control. (the deleting keys are too dangerous here) 
COMBO    J       [v!!v .... ....] > comboNtimes(LEFT,8)
COMBO    L       [v!!v .... ....] > comboNtimes(RIGHT,8)
COMBO    I       [v!!v .... ....] > comboNtimes(UP,8)
COMBO    K       [v!!v .... ....] > comboNtimes(DOWN,8)
COMBO    N       [v!!v .... ....] > comboNtimes(LCTRL+LEFT,8)
COMBO    M       [v!!v .... ....] > comboNtimes(LCTRL+RIGHT,8)
COMBO    O       [v!!v .... ....] > comboNtimes(PGUP,10)
COMBO    .       [v!!v .... ....] > comboNtimes(PGDOWN,10)
COMBO    Y       [v!!v .... ....] > combo(LCTRL+HOME) #because caps+ctrl+Y is hard to press
COMBO    U       [v!!v .... ....] > combo(LCTRL+END)  #dito

    #Undo Cut Copy Paste Redo
COMBO    A       [!!!v !!!! !!!!] > combo(LCTRL+Z)
COMBO    S       [!!!v !!!! !!!!] > combo(LCTRL+X)
COMBO    D       [!!!v !!!! !!!!] > combo(LCTRL+C)
COMBO    F       [!!!v !!!! !!!!] > combo(LCTRL+V)
COMBO    G       [!!!v !!!! !!!!] > combo(LCTRL+Y)

COMBO    Z       [!!!! !!!! !!v!] > combo(LCTRL+Z) #make sure Ctrl-Z is Undo even with Z<>Y remapping
COMBO    Y       [!!!! !!!! !!v!] > combo(LCTRL+Y)
COMBO    BSP     [!!!v .... ...!] > combo(LCTRL+Z)       #Caps+NotShift+Backspace = UNDO. Nice for 2 hands
COMBO    BSP     [!!!v .... ...v] > moddedKey(Y & ..v!)  #Caps+Shift+Backspace = REDO
    

[TAB_TO_NUMPAD]
# [TAB Layer]
# summons the Numpad under the right hand.
# QWERT -> INSERT, PRINT, ScrollLock, PAUSE, NumLock
#
# TAB   IN PR SL PA NL    -  7  8  9  .  *  /  ENTR
# CAPS   …  …  …  …  …     <- 4  5  6  0  =  E||NTR 
# LS||H   …  …  …  …  …     +  1  2  3  R||SHIFT    

MODIFIER   TAB     MOD10  TAB

COMBO    M       [!!v! .!!! !!!!] > key(NP1)
COMBO    ,       [!!v! .!!! !!!!] > key(NP2)
COMBO    .       [!!v! .!!! !!!!] > key(NP3)
COMBO    J       [!!v! .!!! !!!!] > key(NP4)
COMBO    K       [!!v! .!!! !!!!] > key(NP5)
COMBO    L       [!!v! .!!! !!!!] > key(NP6)
COMBO    U       [!!v! .!!! !!!!] > key(NP7)
COMBO    I       [!!v! .!!! !!!!] > key(NP8)
COMBO    O       [!!v! .!!! !!!!] > key(NP9)
COMBO    ;       [!!v! .!!! !!!!] > key(NP0)

COMBO    Y       [!!v! !!!! !!!!] > key(NP-)
COMBO    H       [!!v! !!!! !!!!] > key(BSP)
COMBO    N       [!!v! !!!! !!!!] > key(NP+)
COMBO    P       [!!v! !!!! !!!!] > key(NP.)
COMBO    [       [!!v! !!!! !!!!] > key(NP*)
COMBO    ]       [!!v! !!!! !!!!] > key(NP/)
COMBO    '       [!!v! !!!! !!!!] > key(NP=) #'
COMBO    RET     [!!v! !!!! !!!!] > key(NPRET)

#extended numpad
COMBO    Q       [!!v! .... ....] > key(INS)
COMBO    W       [!!v! .... ....] > key(SYSRQ)   #[Print]
COMBO    E       [!!v! .... ....] > key(SCRLOCK) #[ScrollLock] what's the purpose of this key?
COMBO    R       [!!v! .... ....] > key(PAUSE)   #[Pause]
COMBO    T       [!!v! .... ....] > key(NUMLOCK)
COMBO    S       [!!v! .... ....] > moddedKey(SYSRQ & .... .... v...) #screenshot of window

[CAPS+TAB_TO_FUNCTION] 
# Function keys on the NumPad (not that great, unless your keyboard has no dedicated F keys)

# TAB   …  …  …  …  …        F7 F8 F9 F11 F12 \
# CAPS   …  …  …  …  …        F4 F5 F6 F10 '  ENTER 
# LS||H   …  …  …  …  …        F1 F2 F3 /   RSHIFT   
OPTION   ShiftShiftToShiftLock   
MODIFIER   CAPS    MOD9   NOP
MODIFIER   TAB     MOD10  TAB

COMBO    M       [!!vv .... ....] > key(F1)
COMBO    ,       [!!vv .... ....] > key(F2)
COMBO    .       [!!vv .... ....] > key(F3)
COMBO    J       [!!vv .... ....] > key(F4)
COMBO    K       [!!vv .... ....] > key(F5)
COMBO    L       [!!vv .... ....] > key(F6)
COMBO    U       [!!vv .... ....] > key(F7)
COMBO    I       [!!vv .... ....] > key(F8)
COMBO    O       [!!vv .... ....] > key(F9)
COMBO    ;       [!!vv .... ....] > key(F10)
COMBO    P       [!!vv .... ....] > key(F11)
COMBO    L\      [!!vv .... ....] > key(F12)
    
#For Function keys, restore the standard ALT key
COMBO    M       [v!vv .... ....] > moddedKey(F1 & v...)
COMBO    ,       [v!vv .... ....] > moddedKey(F2 & v...)
COMBO    .       [v!vv .... ....] > moddedKey(F3 & v...)
COMBO    J       [v!vv .... ....] > moddedKey(F4 & v...)
COMBO    K       [v!vv .... ....] > moddedKey(F5 & v...)
COMBO    L       [v!vv .... ....] > moddedKey(F6 & v...)
COMBO    U       [v!vv .... ....] > moddedKey(F7 & v...)
COMBO    I       [v!vv .... ....] > moddedKey(F8 & v...)
COMBO    O       [v!vv .... ....] > moddedKey(F9 & v...)
COMBO    ;       [v!vv .... ....] > moddedKey(F10 & v...)
COMBO    P       [v!vv .... ....] > moddedKey(F11 & v...)
COMBO    [       [v!vv .... ....] > moddedKey(F12 & v...)
    

[ALT_TO_SPECIAL_CHARS]
# [MOD12 (ALT) Layer]  Special Characters
# TAB   !  @  #  $  %     ^  &  (  )  ?  ü  ß 
# CAPS   -  +  *  /  =     <- \  {  }  ö  ä 
# LS||H   `  ~  |  _  …     <  >  [  ] 

# Some duplicates, because a lot of programmer's key are on the right pinky,
# which stretches a lot and causes issues for me.
OPTION     AltAltToAlt     
MODIFIER     LALT    MOD12       NOP
MODIFIER     RALT    MOD12       NOP

    #top row
    #the US Shift+Numbers, but one row lower. Same fingers less stretch.
COMBO    Q       [v.!! .... ....] > moddedKey(1 & .... ...v) #!
COMBO    W       [v.!! .... ....] > moddedKey(2 & .... ...v) #@
COMBO    E       [v.!! .... ....] > moddedKey(3 & .... ...v) ##
COMBO    R       [v.!! .... ....] > moddedKey(4 & .... ...v) #$
COMBO    T       [v.!! .... ....] > moddedKey(5 & .... ...v) #%

COMBO    Y       [v.!! .... ....] > moddedKey(6 & .... ...v) #^
COMBO    U       [v.!! .... ....] > moddedKey(7 & .... ...v) #&
COMBO    I       [v.!! .... ....] > moddedKey(9 & .... ...v) #(
COMBO    O       [v.!! .... ....] > moddedKey(0 & .... ...v) #)
COMBO    P       [v.!! .... ....] > moddedKey(/ & .... ...v) #?
    #middle row
COMBO    A       [v.!! .... ....] > key(-) #-
COMBO    S       [v.!! .... ....] > moddedKey(= & .... ...v) #+
COMBO    D       [v.!! .... ....] > moddedKey(8 & .... ...v) #*
COMBO    F       [v.!! .... ....] > key(/) #/
COMBO    G       [v.!! .... ....] > key(=) #=

COMBO    H       [v.!! .... ....] > key(BSP) #back
COMBO    J       [v.!! .... ....] > key(\) #\
COMBO    K       [v.!! .... ....] > moddedKey([ & .... ...v) #{
COMBO    L       [v.!! .... ....] > moddedKey(] & .... ...v) #}
    #bottom row
COMBO    Z       [v.!! .... ....] > key(`) #GRAVE
COMBO    X       [v.!! .... ....] > moddedKey(` & .... ...v) #~
COMBO    C       [v.!! .... ....] > moddedKey(\ & .... ...v) #|
COMBO    V       [v.!! .... ....] > moddedKey(- & .... ...v) #_
COMBO    B       [v.!! .... ....] > altChar(0133) # …

COMBO    N       [v.!! .... ....] > moddedKey(, & .... ...v) #<
COMBO    M       [v.!! .... ....] > moddedKey(. & .... ...v) #>
COMBO    ,       [v.!! .... ....] > key([) #[
COMBO    .       [v.!! .... ....] > key(]) #]

[ALT_TO_GERMAN_CHARS]
#German chars:  ö ä ü ß  Ö Ä Ü 
OPTION     AltAltToAlt     
MODIFIER     LALT    MOD12       NOP
MODIFIER     RALT    MOD12       NOP

COMBO    '       [v... .... ...!] > altChar(132) #ä
COMBO    '       [v... .... ...v] > altChar(142) #Ä
COMBO    ;       [v... .... ...!] > altChar(148) #ö
COMBO    ;       [v... .... ...v] > altChar(153) #Ö
COMBO    [       [v... .... ...!] > altChar(129) #ü
COMBO    [       [v... .... ...v] > altChar(154) #Ü
COMBO    ]       [v... .... ....] > altChar(225) #ß
    

[ALT_TAPPED+CAPS_TAPPED_TO_EXTRA_CHARS]
#Super Duper Extra Special chars with Tapped Alt + Tapped Caps (no shift)
# TAB   …  Σ  …  …  …     …  …  …  …  …  …  …  
# CAPS   …  …  …  …  …     …  …  …  …  …  …  
#         …  …  …  …  …     …  …  …  …  …  
OPTION   AltAltToAlt     
OPTION   ShiftShiftToShiftLock
MODIFIER   LALT    MOD12       NOP
MODIFIER   RALT    MOD12       NOP
MODIFIER   CAPS    MOD9        NOP

COMBO    E       [T..T .... ...!] > altChar(228) # Σ Epsilon


[ALT_TAPPED+CAPS_TAPPED+SHIFT_TO_SUPEREXTRA_CHARS]
#Super Duper Extra Hyper Special chars with Tapped Alt + Tapped Caps + Shift (just showing off here ;)
#These must be defined before the "Tapped Alt without Tapped Shift" combos

# TAB   …  ε  …  …  …     …  …  …  …  …  …  … 
# CAPS   …  …  …  …  …     …  …  …  …  …  …   
# LSHIFT  …  …  …  …  …     …  …  …  …  …   

COMBO    E       [T..T .... ...v] > altChar(238) # ε Epsilon

        
[ALT_TAPPED_TO_VERY_SPECIAL_CHARS]
#Very Special chars with Tapped Alt

# ESC  ¹  ²  ³                       º
# TAB   …  €  …  …  …     …  …  …  …  …  …  …  ENTR
# CAPS   …  …  °  …  ♀     …  …  …  …  …  …  E||NTR 
# LSHIFT   …  …  ©  …  …     ♂  …  …  …  …  SHIFT    
          
OPTION   AltAltToAlt     
MODIFIER   LALT    MOD12       NOP
MODIFIER   RALT    MOD12       NOP

COMBO    0       [T... .... ....] > altChar(0186) #power 0
COMBO    1       [T... .... ....] > altChar(0185) #power 1
COMBO    2       [T... .... ....] > altChar(0178) #power 2
COMBO    3       [T... .... ....] > altChar(0179) #power 3
COMBO    E       [T... .... ....] > altChar(0128) #Euro
COMBO    C       [T... .... ....] > altChar(0169) #Copyright
COMBO    D       [T... .... ....] > altChar(248) #Degree
COMBO    M       [T... .... ....] > altChar(11) #Male
COMBO    F       [T... .... ....] > altChar(12) #Female


[NUMPAD+CONTROL_TO_TABLE1]
# NumPad + Control = more special chars on the NumPad and the virtual NumPad
#┌──────────────────────────┬────┐
#│ rectangles with Tab+Ctrl │    │
#├──────────────────────────┼────┘
#│ aint't it quaint?        │    
#└──────────────────────────┘

MODIFIER   TAB     MOD10  TAB

    #PHYSICAL NUMPAD
    # .├┤┬
    # ┌─┐┴
    # │┼│
    # └─┘.
    # SP R

COMBO    NP-     [.... .... ..v!] > altChar(194)
COMBO    NP7     [.... .... ..v!] > altChar(218)
COMBO    NP8     [.... .... ..v!] > altChar(196)
COMBO    NP9     [.... .... ..v!] > altChar(191)
COMBO    NP/     [.... .... ..v!] > altChar(195)
COMBO    NP4     [.... .... ..v!] > altChar(179)
COMBO    NP5     [.... .... ..v!] > altChar(197)
COMBO    NP6     [.... .... ..v!] > altChar(179)
COMBO    NP*     [.... .... ..v!] > altChar(180)
COMBO    NP+     [.... .... ..v!] > altChar(193)
COMBO    NP1     [.... .... ..v!] > altChar(192)
COMBO    NP2     [.... .... ..v!] > altChar(196)
COMBO    NP3     [.... .... ..v!] > altChar(217)
COMBO    NP0     [.... .... ..v!] > moddedKey(SPACE & ..!.)

    #VIRTUAL NUMPAD
    #   ┬┌─┐
    #   ├│┼│┤
    #   ┴└─┘
COMBO    Y       [!.v! .... ..v!] > altChar(194)
COMBO    U       [!.v! .... ..v!] > altChar(218)
COMBO    I       [!.v! .... ..v!] > altChar(196)
COMBO    O       [!.v! .... ..v!] > altChar(191)
COMBO    H       [!.v! .... ..v!] > altChar(195)
COMBO    J       [!.v! .... ..v!] > altChar(179)
COMBO    K       [!.v! .... ..v!] > altChar(197)
COMBO    L       [!.v! .... ..v!] > altChar(179)
COMBO    ;       [!.v! .... ..v!] > altChar(180)
COMBO    N       [!.v! .... ..v!] > altChar(193)
COMBO    M       [!.v! .... ..v!] > altChar(192)
COMBO    ,       [!.v! .... ..v!] > altChar(196)
COMBO    .       [!.v! .... ..v!] > altChar(217)


[NUMPAD+CONTROL+SHIFT_TO_TABLE2]
# TAB + Control + Shift = even more special chars on the (virtual) NumPad
# ╔═══════════════════╦═══╗
# ║ same, with LShift ║   ║
# ╠═══════════════════╬═══╝
# ╚═══════════════════╝
#
MODIFIER   TAB     MOD10  TAB

    #NUMPAD
    # .╠╣╦
    # ╔═╗╩┴
    # ║╬║
    # ╚═╝.
    # . .
COMBO    NP-     [.... .... ..vv] > altChar(203)
COMBO    NP7     [.... .... ..vv] > altChar(201)
COMBO    NP8     [.... .... ..vv] > altChar(205)
COMBO    NP9     [.... .... ..vv] > altChar(187)
COMBO    NP/     [.... .... ..vv] > altChar(204)
COMBO    NP4     [.... .... ..vv] > altChar(186)
COMBO    NP5     [.... .... ..vv] > altChar(206)
COMBO    NP6     [.... .... ..vv] > altChar(186)
COMBO    NP*     [.... .... ..vv] > altChar(185)
COMBO    NP+     [.... .... ..vv] > altChar(202)
COMBO    NP1     [.... .... ..vv] > altChar(200)
COMBO    NP2     [.... .... ..vv] > altChar(205)
COMBO    NP3     [.... .... ..vv] > altChar(188)
COMBO    NP0     [.... .... ..vv] > moddedKey(SPACE & ..!!)

    #VIRTUAL NUMPAD
    #   ╦╔═╗
    #   ╠║╬║╣
    #   ╩╚═╝
COMBO    Y       [!.v! .... ..vv] > altChar(203)
COMBO    U       [!.v! .... ..vv] > altChar(201)
COMBO    I       [!.v! .... ..vv] > altChar(205)
COMBO    O       [!.v! .... ..vv] > altChar(187)
COMBO    H       [!.v! .... ..vv] > altChar(204)
COMBO    J       [!.v! .... ..vv] > altChar(186)
COMBO    K       [!.v! .... ..vv] > altChar(206)
COMBO    L       [!.v! .... ..vv] > altChar(186)
COMBO    ;       [!.v! .... ..vv] > altChar(185)
COMBO    N       [!.v! .... ..vv] > altChar(202)
COMBO    M       [!.v! .... ..vv] > altChar(200)
COMBO    ,       [!.v! .... ..vv] > altChar(205)
COMBO    .       [!.v! .... ..vv] > altChar(188)
    

[CAPS+NUMBERS_TO_AHK_CLIPBOARDS]
# Caps + Numbers = AutoHotKey magic combos -> 10 clipboards
# Requires a corresponding AHK script.
OPTION   ShiftShiftToShiftLock   
MODIFIER   CAPS    MOD9   NOP

COMBO    1       [...v .... ....] > combo(F14+1)
COMBO    2       [...v .... ....] > combo(F14+2)
COMBO    3       [...v .... ....] > combo(F14+3)
COMBO    4       [...v .... ....] > combo(F14+4)
COMBO    5       [...v .... ....] > combo(F14+5)
COMBO    6       [...v .... ....] > combo(F14+6)
COMBO    7       [...v .... ....] > combo(F14+7)
COMBO    8       [...v .... ....] > combo(F14+8)
COMBO    9       [...v .... ....] > combo(F14+9)
COMBO    0       [...v .... ....] > combo(F14+0)
    
COMBO    1       [...T .... ....] > combo(F15+1)
COMBO    2       [...T .... ....] > combo(F15+2)
COMBO    3       [...T .... ....] > combo(F15+3)
COMBO    4       [...T .... ....] > combo(F15+4)
COMBO    5       [...T .... ....] > combo(F15+5)
COMBO    6       [...T .... ....] > combo(F15+6)
COMBO    7       [...T .... ....] > combo(F15+7)
COMBO    8       [...T .... ....] > combo(F15+8)
COMBO    9       [...T .... ....] > combo(F15+9)
COMBO    0       [...T .... ....] > combo(F15+0)



# ╔════════════════════════════════════════════════════════════════════════════╗
# ║     ALPHA MAPPING LAYERS BELOW                                             ║
# ║ These layers contain simple "keyA to keyB" mappings.                       ║
# ║ Use them to configure DVORAK, COLMAK, or whatever custom layout you like.  ║
# ║ Switch alpha layers with [ESC]+[0..9]                                      ║
# ╚════════════════════════════════════════════════════════════════════════════╝


# Syntax:
#    ALPHA_FROM  I N P U T
#    ALPHA_TO    O U T P U
#    ALPHA_END
# This will map I->O, N->U, P->T, U->P, T->U
# ALPHA_FROM and ALPHA_TO *must* contain the same number of keys.
#
# You can format these 'maps' anyway you like, just have at least one blank between each key.
# This is the same map:
# ALPHA_FROM  I      N
#             P      U
# ALPHA_TO    O
#          U T P U
# ALPHA_END

 
[LAYOUT_QWERTZ]
ALPHA_FROM  Y  Z
ALPHA_TO    Z  Y
ALPHA_END

[LAYOUT_QWERTZJ]
# the Z<>Y flip on US<>German keyboards f*ks with my muscle memory, and I cannot reconfigure my typewriters to QWERTY. So, QWERTZ it is for me...
# Backslash key on ANSI is Return on ISO, and the other way around. This sucks when you switch boards -> map Backslash to Return and all boards are consistent.
ALPHA_FROM  Y  Z  \
ALPHA_TO    Z  Y  RET
ALPHA_END


[LAYOUT_WORKMAN]
#Original Workman layout
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
     z  x  c  v  b     n  m
ALPHA_TO
   q  d  r  w  b     j  f  u  p  ;   
    a  s  h  t  g     y  n  e  o  i
     z  x  m  c  v     k  l
ALPHA_END


[LAYOUT_WORKMANJ]
#Workman but with Shift, Enter and Z in the 'right' place
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '  \
     z  x  c  v  b     n  m  ,  .
ALPHA_TO
   q  d  r  w  b     z  f  u  p  ;  [  ]
    a  s  h  t  g     j  n  e  o  i  '  RET     # note the ' char triggers my editor
     y  x  m  c  v     k  l  ,  .
ALPHA_END



[LAYOUT_COLEMAK]
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
     z  x  c  v  b     n  m
ALPHA_TO
   q  w  f  p  g     j  l  u  y  ;
    a  r  s  t  d     h  n  e  i  o
     z  x  c  v  b     k  m
ALPHA_END


[LAYOUT_COLEMAK_MOD]
# Colemak_Angle-Mod-DH
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p
    a  s  d  f  g     h  j  k  l  ;
  L\ z  x  c  v  b     n  m             # L\ = 'left backslash', only on ISO boards
ALPHA_TO
   q  w  f  p  b     j  l  u  y  ;
    a  r  s  t  g     k  n  e  i  o
  z  x  c  d  v  L\    m  h
ALPHA_END


[LAYOUT_DVORAK]
# DVORAK_Simplified_US
ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '
     z  x  c  v  b     n  m  ,  .  /
ALPHA_TO
   '  ,  .  p  y     f  g  c  r  l  /  =     # closing the apos ' pair to help my editor
    a  o  e  u  i     d  h  t  n  s  -
     ;  q  j  k  x     b  m  w  v  z
ALPHA_END



[REFERENCE: Mapping of Scancodes to Key Labels]
# Taken from scancodes.cpp
# To find the Label for a scancode, switch to debug mode with [ESC]+[D], press the key, and look at the first item of the debug line.
SC_NOP, "NOP"	| SC_ESCAPE, "ESC"	| SC_1, "1"	| SC_2, "2"	| SC_3, "3"	| SC_4, "4"	| SC_5, "5"	| SC_6, "6"	| SC_7, "7"	| SC_8, "8"	| SC_9, "9"	| SC_0, "0"	| SC_MINUS, "-"	| SC_EQUALS, "="	| SC_BACK, "BSP"	| 
SC_TAB, "TAB"	| SC_Q, "Q"	| SC_W, "W"	| SC_E, "E"	| SC_R, "R"	| SC_T, "T"	| SC_Y, "Y"	| SC_U, "U"	| SC_I, "I"	| SC_O, "O"	| SC_P, "P"	| SC_LBRACK, "["	| SC_RBRACK, "]"	| SC_RETURN, "RET"	| 
SC_LCTRL, "LCTRL"	| SC_A, "A"	| SC_S, "S"	| SC_D, "D"	| SC_F, "F"	| SC_G, "G"	| SC_H, "H"	| SC_J, "J"	| SC_K, "K"	| SC_L, "L"	| SC_SEMI, ";"	| SC_APOS, "'"	| 
SC_GRAVE, "`"	| SC_LSHIFT, "LSHF"	| SC_BSLASH, "\\"	| SC_Z, "Z"	| SC_X, "X"	| SC_C, "C"	| SC_V, "V"	| SC_B, "B"	| SC_N, "N"	| SC_M, "M"	| SC_COMMA, ","	| SC_DOT, "."	| SC_SLASH, "/"	| SC_RSHIFT, "RSHF"	| 
SC_NPMULT, "NP*"	| SC_LALT, "LALT"	| SC_SPACE, "SPACE"	| SC_CAPS, "CAPS"	| 
SC_F1, "F1"	| SC_F2, "F2"	| SC_F3, "F3"	| SC_F4, "F4"	| SC_F5, "F5"	| SC_F6, "F6"	| SC_F7, "F7"	| SC_F8, "F8"	| SC_F9, "F9"	| SC_F10, "F10"	| SC_NUMLOCK, "NUMLOCK"	| SC_SCRLOCK, "SCRLOCK"	| 
SC_NP7, "NP7"	| SC_NP8, "NP8"	| SC_NP9, "NP9"	| SC_NPSUB, "NP-"	| SC_NP4, "NP4"	| SC_NP5, "NP5"	| SC_NP6, "NP6"	| SC_NPADD, "NP+"	| SC_NP1, "NP1"	| SC_NP2, "NP2"	| SC_NP3, "NP3"	| SC_NP0, "NP0"	| SC_NPDOT, "NP."	| 
SC_LBSLASH, "L\\"	| SC_F11, "F11"	| SC_F12, "F12"	| SC_NPEQUALS1, "NP="	| SC_F13, "F13"	| SC_F14, "F14"	| SC_F15, "F15"	| 
CAPSICAIN virtual modifiers:	| SC_MOD9, "MOD9" 	|  SC_MOD10, "MOD10"	| SC_MOD11, "MOD11"	|  SC_MOD12, "MOD12"	| SC_MOD13, "MOD13"	| SC_MOD14, "MOD14"	| SC_MOD15, "MOD15"	| 
SC_KANA, "KANA"	| SC_ABNT_C1, "ABNT_C1"	| SC_CONVERT, "CONVERT"	| SC_NOCONVERT, "NOCONVERT"	| SC_YEN, "YEN"	| SC_ABNT_C2, "ABNT_C2"	| SC_NPEQUALS2, "NPEQUALS2"	| SC_PREVTRACK, "PREVTRACK"	| 
SC_AT, "AT"	| SC_COLON, "COLON"	| SC_UNDERLINE, "UNDERLINE"	| SC_KANJI, "KANJI"	| SC_STOP, "STOP"	| SC_AX, "AX"	| SC_UNLABELED, "UNLABELED"	| SC_NEXTTRACK, "NEXTTRACK"	| 
SC_NPRET, "NPRET"	| SC_RCTRL, "RCTRL"	| SC_MUTE, "MUTE"	| SC_CALCULATOR, "CALCULATOR"	| SC_PLAYPAUSE, "PLAYPAUSE"	| SC_MEDIASTOP, "MEDIASTOP"	| SC_TWOSUPERIOR, "TWOSUPERIOR"	| 
SC_VOLUMEDOWN, "VOLUMEDOWN"	| SC_VOLUMEUP, "VOLUMEUP"	| SC_WEBHOME, "WEBHOME"	| 
SC_NUMPADCOMMA, "NP,"	| SC_DIVIDE, "NP/"	| SC_SYSRQ, "SYSRQ"	| SC_RALT, "RALT"	| SC_PAUSE, "PAUSE"	| SC_HOME, "HOME"	| SC_UP, "UP"	| SC_PGUP, "PGUP"	| 
SC_LEFT, "LEFT"	| SC_RIGHT, "RIGHT"	| SC_END, "END"	| SC_DOWN, "DOWN"	| SC_PGDOWN, "PGDOWN"	| SC_INSERT, "INS"	| SC_DELETE, "DEL"	| SC_LWIN, "LWIN"	| SC_RWIN, "RWIN"	| SC_APPS, "APPS"	| 
SC_POWER, "POWER"	| SC_SLEEP, "SLEEP"	| SC_WAKE, "WAKE"	| SC_WEBSEARCH, "WEBSEARCH"	| SC_WEBFAVORITES, "WEBFAVORITES"	| SC_WEBREFRESH, "WEBREFRESH"	| SC_WEBSTOP, "WEBSTOP"	| 
SC_WEBFORWARD, "WEBFORWARD"	| SC_WEBBACK, "WEBBACK"	| SC_MYCOMPUTER, "MYCOMPUTER"	| SC_MAIL, "MAIL"	| SC_MEDIASELECT, "MEDIASELECT"
