# Capsicain.example.ini config file

# This is a very simple config that shows the basic features.
# Rename this file to capsicain.ini to make it active.
# See the full capsicain.cajhin.ini for a lot more information.

# Press [ESC] + [R]  to reset/reload any changes you make to this file.


GLOBAL IniVersion example_v1
                #any string, so you can check with [ESC]+[S]tatus if you're running the right config

GLOBAL ActiveLayerOnStartup 1
                #This layer is active on startup
                #Switch layers with [ESC]+[0..9]
                #0=hardcoded = no changes at all
                #1=QwertZ
                #2=Dvorak


[LAYER_1]
OPTION layerName = Example-Layer_1

#verbose logging. Switch with [ESC]+[D]
OPTION Debug

# Map Tab to Left Control. If you tap (press+release) Tab, the [TAB] key is sent
MODIFIER    TAB    LCTRL   TAB

# Map CapsLock key to virtual modifier MOD9 key. If you tap (press+release) CapsLock, nothing happens (No OPeration).
MODIFIER    CAPS   MOD9    NOP

 
    # Map Caps + J to CursorLeft. Remember we mapped Caps to MOD9, and the symbol for "and MOD9 down" is [....& .... ....]
COMBO    J		[...& .... ....] > key (LEFT)  
    # Note that Shift + Caps + J  results in  Shift + LEFT. The Shift key is not touched by this mapping, so Windows knows it is down.

    # Map Caps + L I K to Cursor Right Up Down, because, HAVING THE CURSOR KEYS ON JKLI IS AWESOME!!! I don't know how people live without it.
COMBO    L		[...& .... ....] > key (RIGHT)  
COMBO    I		[...& .... ....] > key (UP)  
COMBO    K		[...& .... ....] > key (DOWN)  


    # Map LWin + X  to  Alt + F4  ('close window')
COMBO    X       [.... .&..] > combo (LALT+F4)


    # Bad config: Map LCtrl + N to CursorLeft
COMBO    N       [.... ..&.] > key (LEFT)
    # This does not work right. Windows knows Ctrl is down, so this results in Control + Left.
    # Here, it would be better to use a 'virtual' MOD9..MOD15 modifier instead of a 'real' modifier, because Windows does not see them.

    # Fix the last one: Map LCtrl + J to CursorLeft, but release the Control key before sending the combo.
	# ^ is the symbol for NOT or UP.
COMBO    J       [.... ..&.] > moddedKey ( LEFT + ..^. )

    # Map Caps + A to eight times shift+left
COMBO    A		[...& .... ....] > comboNtimes (LShf+LEFT,8)

    # Map LCtrl + Backspace to Ctrl + Z (Undo), but only if NO other modifiers are pressed
COMBO    BSP		[^^^ ^^^^ ^^^^ ^^&^] > combo (LCTRL+Z)
    
    # Map LCtrl + L to Ctrl-Alt-Delete
COMBO    L       [.... ..&.] > moddedKey ( DEL + .... & &. )
    

    # Map Tapped-LShift + O to 'ö'. This uses the Windows ALT+NUMPAD codes
COMBO    O		[.... .... ...T] > altChar (148)  # ö

    # Map Tapped-LShift + Tapped-RShift + A to 'Ä'
COMBO    A		[.... ...T ...T] > altChar (142)  # Ä

    # Map Tapped-LShift + A to 'ä'
COMBO    A		[.... .... ...T] > altChar (132)  # ä
    # note that this rule also matches Tap-Lshift + Tap-RShift + A.  The extra tap is ignored. So, this must come *after* the more specific rule for Ä
        

    # Map Tapped-LShift + Tapped-RShift + Tapped-LControl + MOD9 + MOD10 + S   to   RAlt + RShift + LAlt + LWin + LCtrl + LShift  + U - and first release RControl if it is down
COMBO    S		[..&& ...T ..TT] > moddedKey ( U + & ^& &&&& )  # Silly, this combo does nothing useful, but it can be done with a one-liner

    # Map Tapped-LControl + H   to "hello(Enter)"
COMBO    H      [..T.]  >  sequence (h_e_l_l_o_RET)


# This maps simple alpha keys: Y to Z, and Z to Y, and flip [,] [.]
ALPHA_FROM  Y  Z  , .
ALPHA_TO    Z  Y  . ,
ALPHA_END


# Switch to Layer_2 with [ESC]+[2]
# This maps all keys to the Dvorak layout; it does nothing else.
[LAYER_2]
OPTION layerName = DVORAK_Simplified_US

ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '
     z  x  c  v  b     n  m  ,  .  /
ALPHA_TO
   '  ,  .  p  y     f  g  c  r  l  /  =      #'this is a comment
    a  o  e  u  i     d  h  t  n  s  -
     ;  q  j  k  x     b  m  w  v  z
ALPHA_END
#Note that you could also write it into one line; char #3 in ALPHA_FROM is simply mapped to char #3 in ALPHA_TO. Whitespaces are ignored.